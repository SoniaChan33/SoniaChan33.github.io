<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo + GitHub搭建个人博客</title>
    <url>/2022/05/06/Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22/</url>
    <content><![CDATA[<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><h3 id="1-前提准备："><a href="#1-前提准备：" class="headerlink" title="1.前提准备："></a>1.前提准备：</h3><ul>
<li><p>安装git</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>验证</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git --version </span><br></pre></td></tr></table></figure></li>
<li><p>安装node.js</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="3-创建博客文件夹并初始化"><a href="#3-创建博客文件夹并初始化" class="headerlink" title="3.创建博客文件夹并初始化"></a>3.创建博客文件夹并初始化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h3 id="4-本地启动"><a href="#4-本地启动" class="headerlink" title="4.本地启动"></a>4.本地启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>访问本地链接：<a href>http://localhost:4000/</a></p>
<p>显示如下页面，表示安装成功</p>
<img src="/2022/05/06/Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22/image-20220506213244777.png" alt="image-20220506213244777" style="zoom:33%;">

<h2 id="安装next主题"><a href="#安装next主题" class="headerlink" title="安装next主题"></a>安装next主题</h2><p>hexo官网主题：<a href>https://hexo.io/themes/</a></p>
<p>这里以next为例</p>
<h3 id="1-在创建文件夹下安装主题"><a href="#1-在创建文件夹下安装主题" class="headerlink" title="1.在创建文件夹下安装主题"></a>1.在创建文件夹下安装主题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h3 id="2-修改文件夹下的-config-yml文件"><a href="#2-修改文件夹下的-config-yml文件" class="headerlink" title="2.修改文件夹下的_config.yml文件"></a>2.修改文件夹下的_config.yml文件</h3><img src="/2022/05/06/Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22/image-20220504215029708.png" alt="image-20220504215029708" style="zoom: 25%;">

<p>修改theme为next</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<p>再次访问页面：</p>
<img src="/2022/05/06/Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22/image-20220504215421643.png" alt="image-20220504215421643" style="zoom: 33%;">

<p>表示next主题安装成功</p>
<h2 id="部署到github仓库"><a href="#部署到github仓库" class="headerlink" title="部署到github仓库"></a>部署到github仓库</h2><h3 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1.创建仓库"></a>1.创建仓库</h3><p>仓库名<strong>严格按xxx.github.io</strong>来（xxx为github用户名 且 小写！</p>
<img src="/2022/05/06/Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22/image-20220505154551563.png" alt="image-20220505154551563" style="zoom:33%;">

<h3 id="2-配置SSH"><a href="#2-配置SSH" class="headerlink" title="2.配置SSH"></a>2.配置SSH</h3><p>如果已经配置过就跳过。</p>
<p>生成SSH key</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 你的邮箱</span><br></pre></td></tr></table></figure>

<p>这个邮箱是github绑定的邮箱</p>
<p>然后登陆github，在Settings里面的SSH and GPG keys里面添加new SSH key</p>
<img src="/2022/05/06/Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22/image-20220504220404992.png" alt="image-20220504220404992" style="zoom: 33%;">

<p>验证是否成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<img src="/2022/05/06/Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22/image-20220504221105797.png" alt="image-20220504221105797" style="zoom: 50%;">

<h3 id="3-部署到github"><a href="#3-部署到github" class="headerlink" title="3.部署到github"></a>3.部署到github</h3><p>安装git部署插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>打开_config.yml文件，地步修改部署配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:youname/youname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>保存后终端执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>



<p>在浏览器输入xxx.github.io就可以看到自己的一个博客了</p>
<h2 id="常用的hexo命令"><a href="#常用的hexo命令" class="headerlink" title="常用的hexo命令"></a>常用的hexo命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br><span class="line"></span><br><span class="line">命令简写</span><br><span class="line">hexo n “我的博客” == hexo new “我的博客” #新建文章</span><br><span class="line">hexo g == hexo generate #生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE</title>
    <url>/2022/05/07/JavaEE/</url>
    <content><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>​                                                           </p>
<img src="/2022/05/07/JavaEE/20210731155304-20220507093630276.png" alt="image-20210731155304853" style="zoom:67%;">



<span id="more"></span>

<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>协议：Protocol</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>HTTP协议是<strong>Hyper Text Transfer Protocol（超文本传输协议）</strong>的缩写, HTTP是万维网（WWW:World Wide Web）的数据通信的基础。</p>
<p>HTTP是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。</p>
<img src="/2022/05/07/JavaEE/20210802110328-20220507093630140.png" alt="image-20210802110327666" style="zoom:67%;">


<p>HTTP是一个基于<strong>TCP/IP</strong>通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>
<img src="/2022/05/07/JavaEE/20210802110337-20220507093630336.png" alt="image-20210802110337133" style="zoom:67%;">

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1支持客户/服务器模式</p>
<p>HTTP协议支持客户端服务端模式，需要使用浏览器作为客户端来访问服务端。</p>
<p>2简单快速</p>
<p>客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、POST等。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p>
<p>3灵活</p>
<p>HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type（Content-Type是HTTP包中用来表示内容类型的标识）加以标记。</p>
<p>4无连接</p>
<p>每次请求一次，释放一次连接。所以无连接表示每次连接只能处理一个请求。优点就是节省传输时间，实现简单。我们有时称这种无连接为短连接。对应的就有了长链接，长连接专门解决效率问题。当建立好了一个连接之后，可以多次请求。但是缺点就是容易造成占用资源不释放的问题。当HTTP协议头部中字段Connection：keep-alive表示支持长链接。</p>
<p>5单向性</p>
<p>服务端永远是被动的等待客户端的请求。</p>
<p>6无状态</p>
<p>HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。为了解决HTTP协议无状态，于是，两种用于保持HTTP连接状态的技术就应运而生了，一个是Cookie，而另一个则是Session。</p>
<p>HTTP协议发展和版本</p>
<p>http协议在1991年发布第一个版本版本号为0.9。随后WWW联盟（WWW Consortium-W3C）于1994年成立，http协议被纳入到W3C组织中进行维护和管理。</p>
<p>http1.0</p>
<p>最早在1996年在网页中使用，内容简单，所以浏览器的每次请求都需要与服务器建立一个TCP连接，服务器处理完成后立即断开TCP连接（无连接），服务器不跟踪每个客户端也不记录过去的请求（无状态）,请求只能由客户端发起（单向性）。</p>
<p>http1.1</p>
<p>到1999年广泛在各大浏览器网络请求中使用，HTTP/1.0中默认使用Connection: close。在HTTP/1.1中已经默认使用Connection: keep-alive（长连接），避免了连接建立和释放的开销，但服务器必须按照客户端请求的先后顺序依次回送相应的结果，以保证客户端能够区分出每次请求的响应内容。通过Content-Length字段来判断当前请求的数据是否已经全部接收。不允许同时存在两个并行的响应。</p>
<p>1.1中最重要的一个特点是支持“长连接”，即“一次连接可以多次请求”。</p>
<p>HTTP 1.1支持持久连接（HTTP/1.1的默认模式使用带流水线的持久连接），在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。一个包含有许多图像的网页文件的多个请求和应答可以在一个连接中传输，但每个单独的网页文件的请求和应答仍然需要使用各自的连接。HTTP 1.1还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间。</p>
<p>http2.0</p>
<p>长连接</p>
<p>在HTTP/2中，客户端向某个域名的服务器请求页面的过程中，只会创建一条TCP连接，即使这页面可能包含上百个资源。  单一的连接应该是HTTP2的主要优势，单一的连接能减少TCP握手带来的时延。HTTP2中用一条单一的长连接，避免了创建多个TCP连接带来的网络开销，提高了吞吐量。</p>
<p>多路复用 (Multiplexing)</p>
<p>HTTP2.0中所有加强性能的核心是二进制传输，在HTTP1.x中，我们是通过文本的方式传输数据。在HTTP2.0中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。</p>
<p>多路复用，连接共享。不同的request可以使用同一个连接传输（最后根据每个request上的id号组合成正常的请求）。</p>
<p>HTTP2.0中，有两个概念非常重要：帧（frame）和流（stream）。<br>帧是最小的数据单位，每个帧会标识出该帧属于哪个流，流是多个帧组成的数据流。<br>所谓多路复用，即在一个TCP连接中存在多个流，即可以同时发送多个请求，对端可以通过帧中的表示知道该帧属于哪个请求。在客户端，这些帧乱序发送，到对端后再根据每个帧首部的流标识符重新组装。通过该技术，可以避免HTTP旧版本的队头阻塞问题，极大提高传输性能。</p>
<p>首部压缩（Header Compression）</p>
<p>由于1.1中header带有大量的信息，并且得重复传输，2.0使用encoder来减少需要传输的hearder大小。</p>
<p>服务端推送（Server Push）</p>
<p>在HTTP2.0中，服务端可以在客户端某个请求后，主动推送其他资源。<br>可以想象一下，某些资源客户端是一定会请求的，这时就可以采取服务端push的技术，提前给客户端推送必要的资源，就可以相对减少一点延迟时间。在浏览器兼容的情况下也可以使用prefetch。</p>
<p>更安全</p>
<p>HTTP2.0使用了tls的拓展ALPN做为协议升级，除此之外，HTTP2.0对tls的安全性做了近一步加强，通过黑名单机制禁用了几百种不再安全的加密算法。</p>
<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="1-引入"><a href="#1-引入" class="headerlink" title="1.   引入"></a>1.   引入</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Servlet是Server Applet的简称，称为服务端小程序，是JavaEE平台下的技术标准，基于Java语言编写的服务端程序。Web容器或应用服务器实现了Servlet标准所以Servlet需运行在Web容器或应用服务器中。Servlet主要功能在于能在服务器中执行并生成数据。</p>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>使用单进程多线程方式运行</p>
<img src="/2022/05/07/JavaEE/20210802204053-20220507093630091.png" alt="image-20210802204049056" style="zoom:80%;">

<h3 id="应用程序中的位置"><a href="#应用程序中的位置" class="headerlink" title="应用程序中的位置"></a>应用程序中的位置</h3><img src="/2022/05/07/JavaEE/05/07/JavaEE/20210802204157-20220507093630043.png" class title="image-20210802204157808">

<h3 id="静态资源和动态资源的区分"><a href="#静态资源和动态资源的区分" class="headerlink" title="静态资源和动态资源的区分"></a>静态资源和动态资源的区分</h3><ul>
<li>静态资源：每次访问都不需要运算，直接就可以返回的资源，如HTML CSS JS 多媒体文件等等 每次访问获得地资源都是一样的</li>
<li>动态资源：每次访问都需要运算代码生成的资源如 Servlet JSP 每次访问获得的结果可能都是不一样的</li>
</ul>
<p>Servlet 作为一种动态资源技术 是后面学习框架的基础</p>
<h3 id="Servlet在程序中的地位"><a href="#Servlet在程序中的地位" class="headerlink" title="Servlet在程序中的地位"></a>Servlet在程序中的地位</h3><p>Servlet是可以接受Http请求并作出相应的一种技术,是JAVA语言编写的一种动态资源<br>Servlet是前后端衔接的一种技术,不是所有的JAVA类都可以接收请求和作出相应,Servlet可以</p>
<p>在MVC模式中,Servlet作为Controller层(控制层)主要技术,用于和浏览器完成数据交互,控制交互逻辑</p>
<h3 id="servlet三大域对象"><a href="#servlet三大域对象" class="headerlink" title="==servlet三大域对象=="></a>==servlet三大域对象==</h3><p><strong>Servlet三大域对象的应用 request、session、application（ServletContext）</strong></p>
<p><strong>ServletContext是一个全局的储存信息的空间，服务器开始就存在，服务器关闭才释放。</strong></p>
<p><strong>request，一个用户可有多个；session，一个用户一个；而servletContext，所有用户共用一个。所以，为了节省空间，提高效率，ServletContext中，要放必须的、重要的、所有用户需要共享的线程又是安全的一些信息。</strong></p>
<h2 id="案例1：初步认识"><a href="#案例1：初步认识" class="headerlink" title="案例1：初步认识"></a>案例1：初步认识</h2><ul>
<li><p>创建一个JAVAWEB项目，并在项目中开发一个自己的Servlet，继承HttpServlet类</p>
<img src="/2022/05/07/JavaEE/20210802205500-20220507093630287.png" alt="image-20210802205500530" style="zoom:50%;">

<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210802205532-20220507093629703.png" class title="image-20210802205532234"></li>
<li><p>在MyServlet类中重写service方法</p>
<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210802205558-20220507093630506.png" class title="image-20210802205558243"></li>
<li><p>在service方法中定义具体的功能代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//动态生成数据</span></span><br><span class="line">    <span class="comment">//随机生成一个整数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt();</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> (num%<span class="number">2</span>==<span class="number">0</span>)?<span class="string">&quot;happy birthday&quot;</span>:<span class="string">&quot;happy new year&quot;</span>;</span><br><span class="line">    <span class="comment">//对浏览器做出响应</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();<span class="comment">//该打印流指向了浏览器</span></span><br><span class="line">    writer.write(message);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在web.xml中配置Servlet的映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--向Tomcat声明一个Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myFirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span><span class="comment">&lt;!--这只是别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.chs.servlet.Myservlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--给Servlet匹配一个请求的映射路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myFirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/mySerlvet.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>打开浏览器请求Servlet资源</p>
<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210802205836-20220507093630044.png" class title="image-20210802205836668"></li>
</ul>
<h2 id="案例2：登录页"><a href="#案例2：登录页" class="headerlink" title="案例2：登录页"></a>案例2：登录页</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><p>准备一个登陆页，可以输入要用户名和密码</p>
<p>输入完毕向Servlet提交用户名和密码</p>
<p>Servlet接收到用户名和密码之后校验是否正确</p>
<p>如果正确响应success</p>
<p>如果不正确响应Failed</p>
<h3 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h3><ul>
<li><p>项目结构：</p>
<img src="/2022/05/07/JavaEE/20210802210210-20220507093630228.png" alt="image-20210802210210084" style="zoom:67%;"></li>
<li><p>开发登录页：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;loginServlet.do&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">&quot;margin: 0px auto&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0px&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>开发后台Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;login servlet invoked&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取请求中的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断数据</span></span><br><span class="line">        String message=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(username.equals(<span class="string">&quot;mashibing&quot;</span>)&amp;&amp; pwd.equals(<span class="string">&quot;123456&quot;</span>))&#123;</span><br><span class="line">            message=<span class="string">&quot;Success&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            message=<span class="string">&quot;Fail&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 作出响应</span></span><br><span class="line">        resp.getWriter().write(message);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置Servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>loginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.mashibing.servlet.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>loginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/loginServlet.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>运行测试</p>
<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210802210437-20220507093630239.png" class title="image-20210802210437528">

<img src="/2022/05/07/JavaEE/20210802210446-20220507093630225.png" alt="image-20210802210446147" style="zoom:67%;">



<h2 id="2-HttpServletRequest"><a href="#2-HttpServletRequest" class="headerlink" title="2. HttpServletRequest"></a>2. HttpServletRequest</h2><p>一个http可以分为三个部分：<strong>请求行 请求头 请求体</strong></p>
<h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><ul>
<li>请求方式：GET   </li>
<li>请求的URL： <a href="http://192.168.56.220:8080/logOnDemo/logon.html">http://192.168.56.220:8080/logOnDemo/logon.html</a></li>
<li>协议及版本： HTTP/1.1</li>
</ul>
<h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><img src="/2022/05/07/JavaEE/05/07/JavaEE/20210802210812-20220507093630614.png" class title="image-20210802210812138">



<h3 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3><p>get方式提交的请求数据通过地址栏提交 ,没有请求体<br>post方式提交请求数据单独放到请求体中,请求时所携带的数据 (post方式)</p>
<h3 id="http支持的请求方式"><a href="#http支持的请求方式" class="headerlink" title="http支持的请求方式"></a>http支持的请求方式</h3><img src="/2022/05/07/JavaEE/05/07/JavaEE/20210802211209-20220507093630776.png" class title="image-20210802211209830">

<h4 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="==get和post的区别=="></a>==get和post的区别==</h4><p>==(面试）==</p>
<ul>
<li><p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p>
</li>
<li><p>GET产生的URL地址可以被Bookmark，而POST不可以。</p>
</li>
<li><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p>
</li>
<li><p>GET请求只能进行url编码，而POST支持多种编码方式。</p>
</li>
<li><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p>
</li>
<li><p>GET请求在URL中传送的参数是有长度限制的，而POST则没有。对参数的数据类型GET只接受ASCII字符，而POST即可是字符也可是字节。</p>
</li>
<li><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p>
</li>
<li><p>GET参数通过URL传递，POST放在Request body中。</p>
</li>
</ul>
<h3 id="具体操作：获得客户端请求信息"><a href="#具体操作：获得客户端请求信息" class="headerlink" title="具体操作：获得客户端请求信息"></a>具体操作：获得客户端请求信息</h3><p>HttpServletRequest对象代表客户端浏览器的请求，当客户端浏览器通过HTTP协议访问服务器时，HTTP请求中的所有信息都会被Tomcat所解析并封装在这个对象中，通过这个对象提供的方法，可以获得客户端请求的所有信息。</p>
<h4 id="1-获取请求行信息"><a href="#1-获取请求行信息" class="headerlink" title="1.获取请求行信息"></a>1.获取请求行信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.getRequestURL():<span class="comment">//返回客户端浏览器发出请求时的完整URL。</span></span><br><span class="line"></span><br><span class="line">req.getRequestURI():<span class="comment">//返回请求行中指定资源部分。</span></span><br><span class="line"></span><br><span class="line">req.getRemoteAddr():<span class="comment">//返回发出请求的客户机的IP地址。</span></span><br><span class="line"></span><br><span class="line">req.getLocalAddr():<span class="comment">//返回WEB服务器的IP地址。</span></span><br><span class="line"></span><br><span class="line">req.getLocalPort():<span class="comment">//返回WEB服务器处理Http协议的连接器所监听的端口。</span></span><br></pre></td></tr></table></figure>

<h4 id="2-获取请求头信息"><a href="#2-获取请求头信息" class="headerlink" title="2.获取请求头信息"></a>2.获取请求头信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.getHeader(<span class="string">&quot;headerKey&quot;</span>):<span class="comment">//根据请求头中的key获取对应的value。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">headerValue</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;headerKey&quot;</span>);</span><br><span class="line">req.getHeaderNames():<span class="comment">//获取请求头中所有的key，该方法返回枚举类型。</span></span><br><span class="line">Enumeration&lt;String&gt; headerNames = req.getHeaderNames();</span><br></pre></td></tr></table></figure>



<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(req.getRequestURL());<span class="comment">//返回客户端浏览器发出请求时的完整URL。</span></span><br><span class="line">        System.out.println(req.getRequestURI());<span class="comment">//返回请求行中指定资源部分。</span></span><br><span class="line">        System.out.println(req.getRemoteAddr());<span class="comment">//返回发出请求的客户机的IP地址。</span></span><br><span class="line">        System.out.println(req.getLocalAddr());<span class="comment">//返回WEB服务器的IP地址。</span></span><br><span class="line">        System.out.println(req.getLocalPort());<span class="comment">//返回WEB服务器处理Http协议的连接器所监听的端口。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主机名: &quot;</span> + req.getLocalName());</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端PORT: &quot;</span> + req.getRemotePort());</span><br><span class="line">        System.out.println(<span class="string">&quot;当前项目部署名: &quot;</span> + req.getContextPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;协议名:&quot;</span>+req.getScheme());</span><br><span class="line">        System.out.println(<span class="string">&quot;请求方式:&quot;</span>+req.getMethod());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据请求头名或者请求头对应的值</span></span><br><span class="line">        System.out.println(req.getHeader(<span class="string">&quot;Accept&quot;</span>));</span><br><span class="line">        <span class="comment">// 获得全部的请求头名</span></span><br><span class="line">        Enumeration&lt;String&gt; headerNames = req.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (headerNames.hasMoreElements())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">headername</span> <span class="operator">=</span> headerNames.nextElement();</span><br><span class="line">            System.out.println(headername+<span class="string">&quot;:&quot;</span>+req.getHeader(headername));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-获取请求数据"><a href="#3-获取请求数据" class="headerlink" title="3.获取请求数据"></a>3.获取请求数据</h4><ul>
<li><p>根据key获取指定value:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.getParameter(<span class="string">&quot;key&quot;</span>):<span class="comment">//根据key获取指定value。</span></span><br></pre></td></tr></table></figure></li>
<li><p>获java取复选框(checkbox组件)中的值（多个值）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.getParameterValues(<span class="string">&quot;checkboxkey&quot;</span>):<span class="comment">//获取复选框(checkbox组件)中的值，返回一个String[]。</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取所有提交数据的key</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.getParameterNames():<span class="comment">//获取请求中所有数据的key，该方法返回一个枚举类型。</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用Map结构获取提交数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.getParameterMap():<span class="comment">//获取请求中所有的数据并存放到一个Map结构中，该方法返回一个Map，其中key为String类型value为String[]类型。</span></span><br></pre></td></tr></table></figure></li>
<li><p>设置请求编码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>请求的数据包基于字节在网络上传输，Tomcat接收到请求的数据包后会将数据包中的字节转换为字符。在Tomcat中使用的是ISO-8859-1的单字节编码完成字节与字符的转换，所以数据中含有中文就会出现乱码，可以通过req.setCharacterEncoding(“utf-8”)方法来对提交的数据根据指定的编码方式重新做编码处理。</p>
</li>
</ul>
<h2 id="案例3-HTTP请求"><a href="#案例3-HTTP请求" class="headerlink" title="案例3:HTTP请求"></a>案例3:HTTP请求</h2><p><strong>需求 ：获得前端客户端表单中请求的数据信息</strong></p>
<h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><h4 id="开发form表单注意事项"><a href="#开发form表单注意事项" class="headerlink" title="开发form表单注意事项"></a>开发form表单注意事项</h4><ol>
<li><p>form 不是from</p>
</li>
<li><p>form表单内部不是所有的标签信息都会提交 一些输入信息  input select textarea … …</p>
</li>
<li><p>提交的标签必须具备<strong>name属性</strong>  name属性的作用是让后台区分数据  id便于在前端区分数据</p>
</li>
<li><p>提交的标签一般都要具备<strong>value属性</strong>  value属性确定我们要提交的具体的数据</p>
</li>
<li><p>==get post==<a href="#get%E5%92%8Cpost%E7%9A%84%E5%8C%BA%E5%88%AB">区别</a><br>get方式数据是通过URL携带<br>提交的数据只能是文本<br>提交的数据量不大<br>get方式提交的数据相对不安全</p>
<p>post 将数据单独打包放到请求体中<br>提交的数据可以是文本可以是各种文件<br>提交的数据量理论上没有上限<br>post方式提交数据相对安全</p>
</li>
</ol>
<p>  ==readonly只读== 也是会提交数据的<br>  ==hidden==  隐藏 也是会提交数据<br>  ==disabled== 不可用 显示但是不提交</p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;form method=<span class="string">&quot;get&quot;</span> action=<span class="string">&quot;myServlet&quot;</span>&gt;</span><br><span class="line">    &lt;table style=<span class="string">&quot;margin: 0px auto&quot;</span> width=<span class="string">&quot;300px&quot;</span> cellpadding=<span class="string">&quot;0px&quot;</span> cellspacing=<span class="string">&quot;0px&quot;</span> border=<span class="string">&quot;1px&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;用户名&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> id=<span class="string">&quot;in1&quot;</span> value=<span class="string">&quot;12345&quot;</span> disabled &gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;密码&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pwd&quot;</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;1&quot;</span> checked&gt;男</span><br><span class="line">                &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;0&quot;</span>&gt;女</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;爱好&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;1&quot;</span>&gt;蓝球</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;2&quot;</span>&gt;足球</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;3&quot;</span>&gt;羽毛球</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;4&quot;</span>&gt;乒乓球</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;个人简介&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;!--文本域 双标签 页面上显示的文字是双标签中的文本 不是value属性</span><br><span class="line"></span><br><span class="line">                    文本域提交的数据不是value属性值,是双标签中的文本</span><br><span class="line">                --&gt;</span><br><span class="line">                &lt;textarea name=<span class="string">&quot;introduce&quot;</span> &gt;b&lt;/textarea&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;籍贯&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;!--</span><br><span class="line">                select</span><br><span class="line">                option没有定义value属性 那么就提交option中间的文字(不推荐)</span><br><span class="line"></span><br><span class="line">                --&gt;</span><br><span class="line">                &lt;select name=<span class="string">&quot;provience&quot;</span>&gt;</span><br><span class="line">                    &lt;option value=<span class="string">&quot;1&quot;</span>&gt;a京&lt;/option&gt;</span><br><span class="line">                    &lt;option value=<span class="string">&quot;2&quot;</span>&gt;b津&lt;/option&gt;</span><br><span class="line">                    &lt;option value=<span class="string">&quot;3&quot;</span>&gt;c冀&lt;/option&gt;</span><br><span class="line">                &lt;/select&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;td colspan=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交数据&quot;</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p><strong>效果：</strong></p>
<img src="/2022/05/07/JavaEE/20210803102738-20220507093630489.png" alt="image-20210803102513541" style="zoom: 50%;">

<h3 id="Servlet代码"><a href="#Servlet代码" class="headerlink" title="Servlet代码"></a>Servlet代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// req获取参数</span></span><br><span class="line">        <span class="comment">// 如果 前端发过来的数据由数据名但是没有值, getParameter返回的是一个空字符串  &quot;&quot;</span></span><br><span class="line">        <span class="comment">// 获取的参数在提交的数据中名都没有,getParameter返回的是null</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span>+username);</span><br><span class="line">        System.out.println(<span class="string">&quot;password:&quot;</span>+req.getParameter(<span class="string">&quot;pwd&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;gender:&quot;</span>+req.getParameter(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">        <span class="comment">// hobby=1&amp;hobby=2&amp;hobby=3 想要获得多个同名的参数 getParameterValues 返回的是一个Sting数组</span></span><br><span class="line">        String[] hobbies = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hobbies:&quot;</span>+ Arrays.toString(hobbies));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// textarea</span></span><br><span class="line">        System.out.println(<span class="string">&quot;introduce:&quot;</span>+req.getParameter(<span class="string">&quot;introduce&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// select</span></span><br><span class="line">        System.out.println(<span class="string">&quot;provience:&quot;</span>+req.getParameter(<span class="string">&quot;provience&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;___________________________&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果不知道参数的名字?</span></span><br><span class="line">        <span class="comment">// 获取所有的参数名</span></span><br><span class="line">        Enumeration&lt;String&gt; pNames = req.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span>(pNames.hasMoreElements())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pname</span> <span class="operator">=</span> pNames.nextElement();</span><br><span class="line">            String[] pValues = req.getParameterValues(pname);</span><br><span class="line">            System.out.println(pname+<span class="string">&quot;:&quot;</span>+Arrays.toString(pValues));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;________________________________&quot;</span>);</span><br><span class="line">        Map&lt;String, String[]&gt; pmap = req.getParameterMap();</span><br><span class="line">        Set&lt;Map.Entry&lt;String, String[]&gt;&gt; entries = pmap.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String[]&gt; entry : entries) &#123;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">&quot;:&quot;</span>+Arrays.toString(entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<img src="/2022/05/07/JavaEE/20210803102814-20220507093630541.png" alt="image-20210803102714186" style="zoom:50%;">

<h2 id="3-HttpServletResponse"><a href="#3-HttpServletResponse" class="headerlink" title="3. HttpServletResponse"></a>3. HttpServletResponse</h2><p>http响应部分可以分为三部分：<strong>响应行，响应头，响应体</strong></p>
<h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><img src="/2022/05/07/JavaEE/05/07/JavaEE/20210803161928-20220507093630572.png" class title="image-20210803161927018">

<p>响应状态码列表</p>
<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210803161950-20220507093630931.png" class title="image-20210803161950030">

<h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p>Content-Type：响应内容的类型(MIME)</p>
<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210803162052-20220507093630775.png" class title="image-20210803162052600">

<h3 id="响应实体"><a href="#响应实体" class="headerlink" title="响应实体"></a>响应实体</h3><p>即<strong>服务器响应回来的内容</strong></p>
<p>​        HttpServletResponse对象代表服务器的响应，封装了响应客户端浏览器的<strong>流对象</strong>，以及向客户端浏览器响应的<strong>响应头、响应数据、响应状态码等信息</strong>。</p>
<h4 id="ContentType-响应设置"><a href="#ContentType-响应设置" class="headerlink" title="ContentType:响应设置"></a>ContentType:响应设置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setContentType(<span class="string">&quot;MIME&quot;</span>):<span class="comment">//该方法可通过MIME-Type设置响应类型。</span></span><br></pre></td></tr></table></figure>

<h6 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a><strong>MIME</strong></h6><p>全称是<strong>Multipurpose Internet Mail Extensions</strong>，即多用途互联网邮件扩展类型。<br>这是HTTP协议中用来定义文档性质及格式的标准。对HTTP传输内容类型进行了全面定义。<br>服务器通过MIME告知响应内容类型，而浏览器则通过MIME类型来确定如何处理文档。</p>
<p><strong>HTTP content-type 类型表：</strong></p>
<p><a href="https://www.runoob.com/http/http-content-type.html">https://www.runoob.com/http/http-content-type.html</a></p>
<p><strong>常见的媒体格式类型如下：</strong></p>
<ul>
<li>text/html ： HTML格式</li>
<li>text/plain ：纯文本格式</li>
<li>text/xml ： XML格式</li>
<li>image/gif ：gif图片格式</li>
<li>image/jpeg ：jpg图片格式</li>
<li>image/png：png图片格式</li>
</ul>
<p>以application开头的媒体格式类型：</p>
<ul>
<li>application/xhtml+xml ：XHTML格式</li>
<li>application/xml： XML数据格式</li>
<li>application/atom+xml ：Atom XML聚合格式</li>
<li>application/json： JSON数据格式</li>
<li>application/pdf：pdf格式</li>
<li>application/msword ： Word文档格式</li>
<li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li>
<li>application/x-www-form-urlencoded ： <form enctype>中默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）</form></li>
</ul>
<p>另外一种常见的媒体格式是上传文件之时使用的：</p>
<ul>
<li>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式</li>
</ul>
<p><strong>常见的字节型响应：</strong></p>
<ul>
<li>image/jpeg：图片类型为jpeg或jpg格式。</li>
</ul>
<ul>
<li>image/gif: 图片类型为gif格式。</li>
</ul>
<p><strong>设置响应编码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>设置服务端为浏览器产生响应的响应编码，服务端会根据此编码将响应内容的字符转换为字节。同时客户端浏览器会根据此编码方式显示响应内容。</p>
<p><strong>在响应中添加附加信息（文件下载）</strong></p>
<p>在实现文件下载时，我们需要修改响应头，添加附加信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,   <span class="string">&quot;attachment; filename=&quot;</span>+文件名);</span><br></pre></td></tr></table></figure>

<p>==Content-Disposition:attachment==</p>
<p>该附加信息表示作为对下载文件的一个标识字段。不会在浏览器中显示而是直接做下载处理。</p>
<p>filename=文件名,表示指定下载文件的文件名。</p>
<p>解决文件名中文乱码问题:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span> (file.getName().getBytes(<span class="string">&quot;gbk&quot;</span>),<span class="string">&quot;iso-8859-1&quot;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 设置响应码</span></span><br><span class="line">        <span class="comment">//resp.setStatus(500);</span></span><br><span class="line">        <span class="comment">//resp.setStatus(405, &quot;request method not supported&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        <span class="comment">//resp.setHeader(&quot;Date&quot;,&quot;2022-11-11&quot;);</span></span><br><span class="line">        <span class="comment">// 自定义头</span></span><br><span class="line">        <span class="comment">// resp.setHeader(&quot;aaa&quot;, &quot;bbb&quot;);</span></span><br><span class="line">        <span class="comment">// 高速浏览器响应的数据是什么? 浏览器根据此头决定 数据如何应用</span></span><br><span class="line">        <span class="comment">// 设置MIME类型 json  xml 文件下载  ... ...</span></span><br><span class="line">        <span class="comment">// resp.setHeader(&quot;content-type&quot;, &quot;text/css&quot;);</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);<span class="comment">// 专门用于设置Content-Type 响应头</span></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;&lt;h1&gt;this is tag h1&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h2><h3 id="1-控制台乱码"><a href="#1-控制台乱码" class="headerlink" title="1 控制台乱码"></a>1 控制台乱码</h3><p>设置Tomcat中 conf下logging.properties中所有的UTF-8编码为GBK即可</p>
<h3 id="2-post请求乱码"><a href="#2-post请求乱码" class="headerlink" title="2 post请求乱码"></a>2 post请求乱码</h3><p>通过HttpServletRequest设置请求编码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-get请求乱码"><a href="#3-get请求乱码" class="headerlink" title="3 get请求乱码"></a>3 get请求乱码</h3><p>需要手动进行编码解码,或者设置tomcat中的server.xml中的URI编码.tomcat9已经解决了该问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span>   <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;utf-8&quot;</span>  /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-响应乱码"><a href="#4-响应乱码" class="headerlink" title="4 响应乱码"></a>4 响应乱码</h3><p>通过HttpServletResponse设置响应编码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以UTF-8编码处理数据</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//设置响应头,以便浏览器知道以何种编码解析数据</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="4-servlet生命周期"><a href="#4-servlet生命周期" class="headerlink" title="4. servlet生命周期"></a>4. servlet生命周期</h2><h3 id="四个阶段"><a href="#四个阶段" class="headerlink" title="四个阶段"></a>四个阶段</h3><p>Servlet的生命周期是由容器管理的，分别经历四个阶段：</p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>次数</th>
<th>时机</th>
</tr>
</thead>
<tbody><tr>
<td>创建 new</td>
<td>1次</td>
<td>第一次请求</td>
</tr>
<tr>
<td>初始化 init()</td>
<td>1次</td>
<td>实例化之后</td>
</tr>
<tr>
<td>执行服务 service()</td>
<td>多次</td>
<td>每次请求</td>
</tr>
<tr>
<td>销毁 destroy()</td>
<td>1次</td>
<td>停止服务</td>
</tr>
</tbody></table>
<p>当客户端浏览器第一次请求Servlet时，容器会实例化这个Servlet，然后调用一次init方法，并在新的线程中执行service方法处理请求。service方法执行完毕后容器不会销毁这个Servlet而是做缓存处理，当客户端浏览器再次请求这个Servlet时，容器会从缓存中直接找到这个Servlet对象，并再一次在新的线程中执行Service方法。当容器在销毁Servlet之前对调用一次destory方法。</p>
<p><strong>在Servlet中我们一般不要轻易使用成员变量!!!! 可能会造成线程安全问题</strong></p>
<p><strong>如果要使用的话,应该尽量避免对成员变量产生修改</strong></p>
<p><strong>如果要产生修改我们应该注意线程安全问题</strong></p>
<p><strong>如果我们自己添加线程安全编码处理,会严重影响效率</strong></p>
<p><strong>综上所述:原则,能不用成员变量就不用!!!</strong></p>
<p>servlet代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyServlet4</span><span class="params">()</span>   &#123;<span class="comment">// 构造一个Servlet对象的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MyServlet4 Constructor invoked&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;<span class="comment">// 初始化</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MyServlet4 init invoked&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 执行服务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MyServlet4 service invoked&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;<span class="comment">// 销毁</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MyServlet4 destory invoked&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet4<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.mashibing.servlet.MyServlet4<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>6<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet4<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myServlet4.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        多次请求servlet并查看控制台输出即可印证上述结论,值得注意的是,如果需要Servlet在服务启动时就实例化并初始化,我们可以在servlet的配置中添加load-on-startup配置启动顺序,配置的数字为启动顺序,应避免冲突且应**&gt;6**</p>
<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210803205411-20220507093631302.png" class title="image-20210803205409578">

<p><strong>Servlet处理请求的过程</strong></p>
<p>​        当浏览器基于get方式请求我们创建Servlet时，我们自定义的Servlet中的doGet方法会被执行。doGet方法能够被执行并处理get请求的原因是，容器在启动时会解析web工程中WEB-INF目录中的web.xml文件，在该文件中我们配置了Servlet与URI的绑定，容器通过对请求的解析可以获取请求资源的URI，然后找到与该URI绑定的Servlet并做实例化处理(注意：只实例化一次，如果在缓存中能够找到这个Servlet就不会再做次实例化处理)。在实例化时会使用Servlet接口类型作为引用类型的定义，并调用一次init方法，由于HttpServlet中重写了该方法所以最终执行的是HttpServlet中init方法(HttpServlet中的Init方法是一个空的方法体)，然后在新的线程中调用service方法。由于在HttpServlet中重写了Service方法所以最终执行的是HttpServlet中的service方法。在service方法中通过request.getMethod()获取到请求方式进行判断如果是Get方式请求就执行doGet方法，如果是POST请求就执行doPost方法。如果是基于GET方式提交的，并且在我们自定义的Servlet中又重写了HttpServlet中的doGet方法，那么最终会根据Java的多态特性转而执行我们自定义的Servlet中的doGet方法。</p>
<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210803205435-20220507093630830.png" class title="image-20210803205435158">

<ul>
<li>老程序员喜欢重写doGet()和doPost()方法 然后挑一个方法里面直接调用另一个方法，因为两个方法很相似。</li>
<li>但是又可以直接重写service，可以同时处理get和post</li>
</ul>
<h2 id="5-ServletContext和ServletConfig"><a href="#5-ServletContext和ServletConfig" class="headerlink" title="5. ServletContext和ServletConfig"></a>5. ServletContext和ServletConfig</h2><h3 id="ServletContext-application"><a href="#ServletContext-application" class="headerlink" title="ServletContext(application)"></a>ServletContext(application)</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>ServletContext官方叫Servlet上下文。服务器会为每一个Web应用创建一个ServletContext对象。这个对象全局唯一，而且Web应用中的所有Servlet都共享这个对象。所以叫全局应用程序共享对象</p>
<img src="/2022/05/07/JavaEE/20210804094215-20220507093631574.png" alt="image-20210804094215771" style="zoom:67%;">

<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul>
<li>相对路径转绝对路径</li>
<li>获取容器的附加信息</li>
<li>读取配置信息</li>
<li>全局容器</li>
</ul>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ul>
<li><p>获取项目的部署名<br>==context.getContextPath()==</p>
</li>
<li><p>相对路径转绝对路径(文件上传下载时需要注意)</p>
<p>==context.getRealPath(“path”)==</p>
<p>该方法可以将一个相对路径转换为绝对路径，在文件上传与下载时需要用到该方法做路径的转换。</p>
</li>
<li><p>获取容器的附加信息</p>
<p>==servletContext.getServerInfo()==</p>
</li>
<li><p>返回Servlet容器的名称和版本号</p>
<ul>
<li><p>返回Servlet容器所支持Servlet的主版本号</p>
<p>==servletContext.getMajorVersion()==</p>
</li>
<li><p>返回Servlet容器所支持Servlet的副版本号</p>
<p>==servletContext.getMinorVersion()==</p>
</li>
</ul>
</li>
<li><p>获取web.xml文件中的信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>key<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>读取web.xml文件中<context-param>标签中的配置信息</context-param></p>
<p>==servletContext.getInitParameter(“key”)==</p>
</li>
<li><p>读取web.xml文件中所有param-name标签中的值。</p>
<p>==servletContext.getInitParameterNames()==</p>
</li>
</ul>
</li>
<li><p>全局容器</p>
<ul>
<li><p>向全局容器中存放数据。</p>
<p>==servletContext.setAttribute(“key”,ObjectValue)==</p>
</li>
<li><p>从全局容器中获取数据。</p>
<p>==servletContext.getAttribute(“key”)==</p>
</li>
<li><p>根据key删除全局容器中的value。</p>
<p>==servletContext.removeAttribute(“key”)==</p>
</li>
</ul>
</li>
</ul>
<h5 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h5><p><strong>xml配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>mashibing<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.msb.testServlet.Servlet1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet1.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>servlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1 通过req获取Servlet对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext1</span> <span class="operator">=</span> req.getServletContext();</span><br><span class="line">        <span class="comment">//通过继承的方法获取Servlet对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext2</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//比较两种获取方法获取的对象</span></span><br><span class="line">        System.out.println(servletContext1==servletContext2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 获取部署名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> servletContext1.getContextPath();</span><br><span class="line">        System.out.println(<span class="string">&quot;contextPath&quot;</span>+contextPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 将一个相对路径转换为项目的绝对路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileUpload</span> <span class="operator">=</span> servletContext1.getRealPath(<span class="string">&quot;fileUpload&quot;</span>);</span><br><span class="line">        System.out.println(fileUpload);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 获取容器的附加信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">serverInfo</span> <span class="operator">=</span> servletContext1.getServerInfo();</span><br><span class="line">        System.out.println(serverInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5 获取Servlet容器的名称和版本号</span></span><br><span class="line">        <span class="comment">//主版本号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">majorVersion</span> <span class="operator">=</span> servletContext1.getMajorVersion();</span><br><span class="line">        <span class="comment">//副版本号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">minorVersion</span> <span class="operator">=</span> servletContext1.getMinorVersion();</span><br><span class="line">        System.out.println(<span class="string">&quot;majorVersion&quot;</span>+majorVersion);</span><br><span class="line">        System.out.println(<span class="string">&quot;minorVersion&quot;</span>+minorVersion);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6 读取web.xml文件信息</span></span><br><span class="line">        <span class="comment">//获取配置的全局初始信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> servletContext1.getInitParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> servletContext1.getInitParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username&quot;</span>+username);</span><br><span class="line">        System.out.println(<span class="string">&quot;password&quot;</span>+password);</span><br><span class="line">        <span class="comment">//配置信息名称未知情况下 获取全局初始信息</span></span><br><span class="line">        Enumeration&lt;String&gt; pNames = servletContext1.getInitParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (pNames.hasMoreElements())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> pNames.nextElement();</span><br><span class="line">            System.out.println(e+<span class="string">&quot;:&quot;</span>+ servletContext1.getInitParameter(e));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7 向ServletContext对象中增加数据域对象</span></span><br><span class="line">        List&lt;String&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(data,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王武&quot;</span>);</span><br><span class="line">        servletContext1.setAttribute(<span class="string">&quot;list&quot;</span>,data);</span><br><span class="line">        servletContext1.setAttribute(<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;boy&quot;</span>);</span><br><span class="line">        <span class="comment">//getAttribute也可以获得初始信息对象</span></span><br><span class="line">        List&lt;String&gt; list = (List&lt;String&gt;) servletContext1.getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> (String) servletContext1.getAttribute(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">        System.out.println(gender);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试结果</p>
<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210804112525-20220507093631140.png" class title="image-20210804112522391">

<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>​        当容器启动是会创建ServletContext对象并一直缓存该对象，知道容器关闭后该对象生命周期结束。ServletContext对象的生命周期非常长，所以在使用全局容器时不建议存放业务数据</p>
<h3 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>ServletConfig对象对应web.xml文件中的<servlet>节点。当Tomcat初始化一个Servlet时，会将该Servlet的配置信息，封装到一个ServletConfig对象中。</servlet></p>
<h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><p>我们通过Config对象读取servlet节点中的配置信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>servletClass<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>key<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>读取web.xml文件中<servlet>标签中<init-param>标签中的配置信息。</init-param></servlet></p>
<p>==servletConfig.getInitParameter(“key”);==</p>
</li>
<li><p>读取web.xml文件中当前<servlet>标签中所有<init-param>标签中的值。</init-param></servlet></p>
<p>==servletConfig.getInitParameterNames();==</p>
</li>
</ul>
<h5 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h5><p> <strong>xml配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet3<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.msb.testServlet.Servlet3<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>brand<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>ASUS<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>screen<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>三星<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet4<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.msb.testServlet.Servlet4<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pinpai<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>联想<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pingmu<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>京东方<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet3<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet3.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet4<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet4.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>servlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line">        System.out.println(servletConfig.getInitParameter(<span class="string">&quot;brand&quot;</span>));</span><br><span class="line">        System.out.println(servletConfig.getInitParameter(<span class="string">&quot;screen&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line">        System.out.println(servletConfig.getInitParameter(<span class="string">&quot;pinpai&quot;</span>));</span><br><span class="line">        System.out.println(servletConfig.getInitParameter(<span class="string">&quot;pingmu&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="6-URL的匹配规则"><a href="#6-URL的匹配规则" class="headerlink" title="6. URL的匹配规则"></a>6. URL的匹配规则</h2><h3 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h3><p>精确匹配是指<url-pattern>中配置的值必须与url完全精确匹配。</url-pattern></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="http://localhost:8888/demo/demo.do">http://localhost:8888/demo/demo.do</a> 匹配</p>
<p><a href="http://localhost:8888/demo/suibian/demo.do">http://localhost:8888/demo/suibian/demo.do</a> 不匹配</p>
<h3 id="扩展名匹配"><a href="#扩展名匹配" class="headerlink" title="扩展名匹配"></a>扩展名匹配</h3><p>在<url-pattern>允许使用统配符“<em>”作为匹配规则，“</em>”表示匹配任意字符。在扩展名匹配中只要扩展名相同都会被匹配和路径无关。注意，在使用扩展名匹配时在<url-pattern>中不能使用“/”，否则容器启动就会抛出异常。</url-pattern></url-pattern></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="http://localhost:8888/demo/abc.do">http://localhost:8888/demo/abc.do</a> 匹配</p>
<p><a href="http://localhost:8888/demo/suibian/haha.do">http://localhost:8888/demo/suibian/haha.do</a> 匹配</p>
<p><a href="http://localhost:8888/demo/abc">http://localhost:8888/demo/abc</a> 不匹配</p>
<h3 id="路径匹配"><a href="#路径匹配" class="headerlink" title="路径匹配"></a>路径匹配</h3><p>根据请求路径进行匹配，在请求中只要包含该路径都匹配，“*”表示任意路径以及子路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/suibian/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="http://localhost:8888/demo/suibian/haha.do">http://localhost:8888/demo/suibian/haha.do</a> 匹配</p>
<p><a href="http://localhost:8888/demo/suibian/hehe/haha.do">http://localhost:8888/demo/suibian/hehe/haha.do</a> 匹配</p>
<p><a href="http://localhost:8888/demo/hehe/heihei.do">http://localhost:8888/demo/hehe/heihei.do</a> 不匹配</p>
<h3 id="任意匹配"><a href="#任意匹配" class="headerlink" title="任意匹配"></a>任意匹配</h3><p>匹配“/ 匹配所有但不包括JSP页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="http://localhost:8888/demo/suibian.do%E5%8C%B9%E9%85%8D">http://localhost:8888/demo/suibian.do匹配</a></p>
<p><a href="http://localhost:8888/demo/addUser.html%E5%8C%B9%E9%85%8D">http://localhost:8888/demo/addUser.html匹配</a></p>
<p><a href="http://localhost:8888/demo/css/view.css%E5%8C%B9%E9%85%8D">http://localhost:8888/demo/css/view.css匹配</a></p>
<p><a href="http://localhost:8888/demo/addUser.jsp%E4%B8%8D%E5%8C%B9%E9%85%8D">http://localhost:8888/demo/addUser.jsp不匹配</a></p>
<p><a href="http://localhost:8888/demo/user/addUser.jsp%E4%B8%8D%E5%8C%B9%E9%85%8D">http://localhost:8888/demo/user/addUser.jsp不匹配</a></p>
<h3 id="匹配所有"><a href="#匹配所有" class="headerlink" title="匹配所有"></a>匹配所有</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="http://localhost:8888/demo/suibian.do%E5%8C%B9%E9%85%8D">http://localhost:8888/demo/suibian.do匹配</a></p>
<p><a href="http://localhost:8888/demo/addUser.html%E5%8C%B9%E9%85%8D">http://localhost:8888/demo/addUser.html匹配</a></p>
<p><a href="http://localhost:8888/demo/suibian/suibian.do%E5%8C%B9%E9%85%8D">http://localhost:8888/demo/suibian/suibian.do匹配</a></p>
<h3 id="优先顺序"><a href="#优先顺序" class="headerlink" title="优先顺序"></a>优先顺序</h3><p>当一个url与多个Servlet的匹配规则可以匹配时，则按照 “ 精确路径 &gt; 最长路径 &gt;扩展名”这样的优先级匹配到对应的Servlet。</p>
<h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><p>Servlet1映射到 /abc/*</p>
<p>Servlet2映射到 /*</p>
<p>Servlet3映射到 /abc</p>
<p>Servlet4映射到 *.do</p>
<p>当请求URL为“/abc/a.html”，“/abc/*”和“/*”都匹配，Servlet引擎将调用Servlet1。</p>
<p>当请求URL为“/abc”时，“/abc/*”和“/abc”都匹配，Servlet引擎将调用Servlet3。</p>
<p>当请求URL为“/abc/a.do”时，“/abc/<em>”和“</em>.do”都匹配，Servlet引擎将调用Servlet1。</p>
<p>当请求URL为“/a.do”时，“/<em>”和“</em>.do”都匹配，Servlet引擎将调用Servlet2。</p>
<p>当请求URL为“/xxx/yyy/a.do”时，“/<em>”和“</em>.do”都匹配，Servlet引擎将调用Servlet2。</p>
<h3 id="URL映射方式"><a href="#URL映射方式" class="headerlink" title="URL映射方式"></a>URL映射方式</h3><p>在web.xml文件中支持将多个URL映射到一个Servlet中，但是相同的URL不能同时映射到两个Servlet中。</p>
<h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/suibian/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/suibian/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="7-注解开发"><a href="#7-注解开发" class="headerlink" title="7. 注解开发"></a>7. 注解开发</h2><p><strong>基于注解式开发Servlet</strong></p>
<p>​    在Servlet3.0以及之后的版本中支持注解式开发Servlet。对于Servlet的配置不在依赖于web.xml配置文件而是使用@WebServlet将一个继承于javax.servlet.http.HttpServlet的类定义为Servlet组件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">displayName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="相关属性"><a href="#相关属性" class="headerlink" title="相关属性"></a>相关属性</h3><img src="/2022/05/07/JavaEE/05/07/JavaEE/20210804163548-20220507093631188.png" class title="image-20210804163546326">



<h2 id="8-forward-请求转发"><a href="#8-forward-请求转发" class="headerlink" title="8. forward 请求转发"></a>8. forward 请求转发</h2><h3 id="forward处理流程"><a href="#forward处理流程" class="headerlink" title="forward处理流程"></a>forward处理流程</h3><ol>
<li>清空Response存放响应正文数据的缓冲区</li>
<li>如果目标资源为Servlet或JSP，就调用它们的service()方法，把该方法产生的响应结果发送到客户端；如果目标资源文件系统中的静态HTML，就读取文档中的数据把它发送到客户端。</li>
</ol>
<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210804165930-20220507093631487.png" class title="image-20210804165930737">

<ul>
<li>请求转发是一种<strong>服务器的行为</strong>,是对浏览器屏蔽</li>
<li>浏览器的地址栏不会发生变化</li>
<li>请求的参数是可以从源组件传递到目标组件的</li>
<li>请求对象和响应对象没有重新创建,而是传递给了目标组件</li>
<li>请求转发可以帮助我们完成页面的跳转</li>
<li>请求转发可以转发至WEB-INF里</li>
<li>请求转发只能转发给当前项目的内部资源,不能转发至外部资源</li>
<li>常用forward</li>
</ul>
<h3 id="forword处理特点"><a href="#forword处理特点" class="headerlink" title="forword处理特点"></a>forword处理特点</h3><ol>
<li>由于forword()方法先清空用于存放响应正文的缓冲区，因此源Servlet生成的响应结果不会被发送到客户端，只有目标资源生成的响应结果才会被发送到客户端。</li>
<li>如果源Servlet在进行请求转发之前，已经提交了响应结（flushBuffer(),close()方法），那么forward()方法抛出IllegalStateException。为了避免该异常，不应该在源Servlet中提交响应结果。</li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li><p>在forward转发模式下,请求应该完全交给目标资源去处理,我们在源组件中,不要作出任何的响应处理</p>
</li>
<li><p>在forward方法调用之后,也不要在使用req和resp对象做其他操作了</p>
</li>
</ol>
<h3 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h3><p>servlet1 请求转发至 servlet2</p>
<p><strong>servlet1</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servlet1.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet1 service invoked&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">money</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;money:&quot;</span>+money);</span><br><span class="line">        <span class="comment">// 设置响应类型和编码(include模式下)</span></span><br><span class="line">        <span class="comment">/*  resp.setCharacterEncoding(&quot;UTF-8&quot;);</span></span><br><span class="line"><span class="comment">        resp.setContentType(&quot;text/html;charset=UTF-8&quot;);*/</span></span><br><span class="line">        <span class="comment">// 增加响应内容</span></span><br><span class="line">        <span class="comment">//resp.getWriter().println(&quot;servlet1在转发之前增加的响应内容&quot;);</span></span><br><span class="line">        <span class="comment">// 请求转发给另一个组件</span></span><br><span class="line">        <span class="comment">// 获得一个请求转发器</span></span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;servlet2.do&quot;);</span></span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;aaa.html&quot;);</span></span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;index.jsp&quot;);</span></span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;WEB-INF/bbb.html&quot;);</span></span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 由请求转发器作出转发动作</span></span><br><span class="line">        requestDispatcher.forward(req,resp);<span class="comment">// 托管给目标资源(forward多一些)</span></span><br><span class="line">        <span class="comment">//requestDispatcher.include(req,resp);  // 让目标资源完成部分工作</span></span><br><span class="line">        <span class="comment">// 继续增加响应信息 (include模式)</span></span><br><span class="line">        <span class="comment">//resp.getWriter().println(&quot;servlet1在转发之后增加的响应内容&quot;);</span></span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Servlet2</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servlet2.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet2 service invoked&quot;</span>);</span><br><span class="line">        <span class="comment">// 接收参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">money</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;money:&quot;</span>+money);</span><br><span class="line">        <span class="comment">// 作出响应 (在forWord模式下)</span></span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;支付宝到账:&quot;</span>+money+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="include（了解）"><a href="#include（了解）" class="headerlink" title="include（了解）"></a>include（了解）</h3><p>在include转发模式下,设置响应可以在转发之前,也可以在转发之后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*servlet1在转发之前增加的响应内容*/</span></span><br><span class="line"><span class="comment">// 设置响应类型和编码(include模式下)</span></span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 增加响应内容</span></span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;servlet1在转发之前增加的响应内容&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得一个请求转发器</span></span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;servlet2.do&quot;</span>);</span><br><span class="line"><span class="comment">// 让目标资源完成部分工作</span></span><br><span class="line">		requestDispatcher.include(req,resp);  </span><br><span class="line"></span><br><span class="line"><span class="comment">/*servlet1在转发之后增加的响应内容*/</span></span><br><span class="line"><span class="comment">// 继续增加响应信息 (include模式)</span></span><br><span class="line">		resp.getWriter().println(<span class="string">&quot;servlet1在转发之后增加的响应内容&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>但是不常用的</p>
<h2 id="9-sendRedirect-响应重定向"><a href="#9-sendRedirect-响应重定向" class="headerlink" title="9. sendRedirect 响应重定向"></a>9. sendRedirect 响应重定向</h2><p>响应重定向是通过HttpServletResponse对象sendRedirect(“路径”)的方式。实现是——服务器通知浏览器,让浏览器去自主请求其他资源的一种方式</p>
<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210804171205-20220507093631361.png" class title="image-20210804171130006">

<h3 id="运作流程："><a href="#运作流程：" class="headerlink" title="运作流程："></a>运作流程：</h3><ol>
<li>用户在浏览器端输入特定URL，请求访问服务器端的某个Servlet。</li>
<li>服务器端的Servlet返回一个状态码为302的响应结果，该响应结果的含义为：让浏览器端再请求访问另一个Web资源，在响应结果中提供了另一个Web资源的URL。另一个Web资源有可能在同一个Web服务器上，也有可能不再同一个Web服务器上。</li>
<li>当浏览器端接收到这种响应结果后，再立即自动请求访问另一个Web资源。</li>
<li>浏览器端接收到另一个Web资源的响应结果。</li>
</ol>
<h3 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码:"></a>测试代码:</h3><p><strong>servlet3</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servlet3.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet3 service invoked&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">money</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;money:&quot;</span>+money);</span><br><span class="line">        <span class="comment">// 响应重定向</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;servlet4.do?money=&quot;</span>+money);</span><br><span class="line">        <span class="comment">//resp.sendRedirect(&quot;WEB-INF/bbb.html&quot;);</span></span><br><span class="line">        <span class="comment">//resp.sendRedirect(&quot;https://www.baidu.com&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>servlet4</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servlet4.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet4 service invoked&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">money</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;money:&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ol>
<li>重定向是服务器给浏览器重新指定请求方向 是一种<strong>浏览器行为</strong> 地址栏会发生变化</li>
<li>重定向时,请求对象和响应对象都会再次产生,请求中的参数是不会携带</li>
<li>重定向也可以帮助我们完成页面跳转</li>
<li>重定向不能帮助我们访问WEB-INF中的资源</li>
<li>重定向可以定向到外部资源</li>
</ol>
<h2 id="10-路径问题"><a href="#10-路径问题" class="headerlink" title="10. 路径问题"></a>10. 路径问题</h2><h3 id="前端路径"><a href="#前端路径" class="headerlink" title="前端路径"></a>前端路径</h3><p>项目结构</p>
<img src="/2022/05/07/JavaEE/20210804210749-20220507093631233.png" alt="image-20210804201746315" style="zoom:67%;">

<p>测试代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    base标签的作用是在相对路径之前自动补充base[href]中的值</span></span><br><span class="line"><span class="comment">    如果base标签不写,那么默认就是当前文件所在的路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://127.0.0.1:8080/testServlet4_war_exploded/&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;base href=&quot;http://127.0.0.1:8080/testServlet4_war_exploded/a/a2/&quot;&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">this is page a1</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    相对(基准)路径:以当前文件本身的位置去定位其他文件,相对自己的路径,以当前文件所在的位置为基准位置</span></span><br><span class="line"><span class="comment">    绝对(基准)路径:以一个固定的位置去定位其他文文件,以一个固定的路径作为定位文件的基准位置,和文件本身位置无关</span></span><br><span class="line"><span class="comment">    相对路径,不以/开头,就是相对路径  ..代表向上一层</span></span><br><span class="line"><span class="comment">    绝对路径,以/开头   在页面上 /代表从项目的部署目录开始找  从webapps中开始找</span></span><br><span class="line"><span class="comment">    页面的绝对路径要有项目名,除非我们的项目没有设置项目名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;a2.html&quot;</span> <span class="attr">TARGET</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>相对路径跳转至A2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../../b/b2/b1.html&quot;</span> <span class="attr">TARGET</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>相对路径跳转至b1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;a/a2/a2.html&quot;</span> <span class="attr">TARGET</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>base相对路径跳转至A2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;b/b2/b1.html&quot;</span> <span class="attr">TARGET</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>base相对路径跳转至b1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/testServlet4_war_exploded/a/a2/a2.html&quot;</span> <span class="attr">TARGET</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>绝对路径跳转至A2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/testServlet4_war_exploded/b/b2/b1.html&quot;</span> <span class="attr">TARGET</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>绝对路径跳转至b1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li><p>以/开头的路径是绝对路径,不以/开头是相对路径</p>
</li>
<li><p>绝对路径/后面要写当前服务的上下文路径名</p>
</li>
<li><p>==../==代表向上一层的路径</p>
</li>
<li><p>==base标签==可以简化相对路径,当使用相对路径时,默认会在相对路径之前补充 base中的内容；如果没有定义base 默认就是当前文件所在的路径</p>
</li>
</ol>
<h2 id="11-会话管理"><a href="#11-会话管理" class="headerlink" title="11. 会话管理"></a>11. 会话管理</h2><h3 id="认识Cookie和Session"><a href="#认识Cookie和Session" class="headerlink" title="认识Cookie和Session"></a>认识Cookie和Session</h3><p>Cookie对象与HttpSession对象的作用是维护客户端浏览器与服务端的会话状态的两个对象。由于HTTP协议是一个无状态的协议，所以服务端并不会记录当前客户端浏览器的访问状态，但是在有些时候我们是需要服务端能够记录客户端浏览器的访问状态的，如获取当前客户端浏览器的访问服务端的次数时就需要会话状态的维持。在Servlet中提供了Cookie对象与HttpSession对象用于维护客户端与服务端的会话状态的维持。二者不同的是Cookie是通过客户端浏览器实现会话的维持，而HttpSession是通过服务端来实现会话状态的维持。</p>
<img src="/2022/05/07/JavaEE/20210805102003-20220507093631748.png" alt="image-20210805101816416" style="zoom: 50%;">

<img src="/2022/05/07/JavaEE/20210805102039-20220507093631952.png" alt="image-20210805102039111" style="zoom: 50%;">

<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie是一种保存少量信息至浏览器的一种技术,第一请求时,服务器可以响应给浏览器一些Cookie信息,第二次请求,浏览器会携带之前的cookie发送给服务器,通过这种机制可以实现在浏览器端保留一些用户信息.为服务端获取用户状态获得依据</p>
<h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul>
<li><p>Cookie使用字符串存储数据</p>
</li>
<li><p>Cookie使用Key与Value结构存储数据</p>
</li>
<li><p>单个Cookie存储数据大小限制在4097个字节</p>
</li>
<li><p>Cookie存储的数据中不支持中文，Servlet4.0中支持</p>
</li>
<li><p>Cookie是与域名绑定所以不支持跨一级域名访问</p>
</li>
<li><p>Cookie对象保存在客户端浏览器内存上或系统磁盘中</p>
</li>
<li><p>Cookie分为持久化Cookie(保存在磁盘上)与状态Cookie(保存在内存上)</p>
</li>
<li><p>浏览器在保存同一域名所返回Cookie的数量是有限的。不同浏览器支持的数量不同，Chrome浏览器为50个</p>
</li>
<li><p>浏览器每次请求时都会把与当前访问的域名相关的Cookie在请求中提交到服务端。</p>
</li>
</ul>
<h4 id="创建对象和响应"><a href="#创建对象和响应" class="headerlink" title="创建对象和响应"></a>创建对象和响应</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>)</span><br><span class="line"><span class="comment">//通过new关键字创建Cookie对象</span></span><br><span class="line">response.addCookie(cookie)</span><br><span class="line"><span class="comment">//通过HttpServletResponse对象将Cookie写回给客户端浏览器。</span></span><br></pre></td></tr></table></figure>





<h4 id="数据的获取"><a href="#数据的获取" class="headerlink" title="数据的获取"></a>数据的获取</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过HttpServletRequest对象获取Cookie，返回Cookie数组。</span></span><br><span class="line">Cookie[] cookies = request.getCookies()</span><br></pre></td></tr></table></figure>





<h4 id="Cookie持久化和状态Cookie"><a href="#Cookie持久化和状态Cookie" class="headerlink" title="Cookie持久化和状态Cookie"></a>Cookie持久化和状态Cookie</h4><ul>
<li>==状态Cookie==：浏览器会缓存Cookie对象。浏览器关闭后Cookie对象销毁。</li>
<li>==持久化Cookie==：浏览器会对Cookie做持久化处理，基于文件形式保存在系统的指定目录中。在Windows10系统中为了安全问题不会显示Cookie中的内容。</li>
</ul>
<p>​       当Cookie对象创建后<strong>默认为状态Cookie</strong>。可以使用Cookie对象下的==cookie.setMaxAge(60)==方法设置失效时间，单位为秒。一旦设置了失效时间，那么该Cookie为持久化Cookie，浏览器会将Cookie对象持久化到磁盘中。当失效时间到达后文件删除。</p>
<h4 id="测试代码-4"><a href="#测试代码-4" class="headerlink" title="测试代码"></a>测试代码</h4><p><strong>通过响应对象 向浏览器响应cookie</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servlet1.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 通过响应对象,向浏览器响应一些Cookie</span></span><br><span class="line">        Cookie c1=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;10&quot;</span>);<span class="comment">// 状态Cookie 重启即清除</span></span><br><span class="line">        Cookie c2=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;gender&quot;</span>, <span class="string">&quot;男&quot;</span>);<span class="comment">//持久化Cookie 让浏览器保留1分钟</span></span><br><span class="line">        <span class="comment">//c2.setMaxAge(60);// 秒钟    持久化Cookie 让浏览器保留1分钟</span></span><br><span class="line">        resp.addCookie(c1);</span><br><span class="line">        resp.addCookie(c2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>获取请求中cookie</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servlet2.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 读取请求中的Cookie</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="comment">//cookies不为null</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != cookies)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                System.out.println(cookie.getName()+<span class="string">&quot;=&quot;</span>+cookie.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="案例：通过Cookie判断用户是否访问过当前Servlet"><a href="#案例：通过Cookie判断用户是否访问过当前Servlet" class="headerlink" title="案例：通过Cookie判断用户是否访问过当前Servlet"></a>案例：通过Cookie判断用户是否访问过当前Servlet</h4><p>需求：</p>
<p>​                                                                                                                                                                                      当客户端浏览器第一次访问Servlet时返回“您好，欢迎您第一次访问！”，第二次访问时返回“欢迎您回来！”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servlet3.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 如果是第一访问当前Servlet.向浏览器响应一个cookie (&quot;servlet3&quot;,&quot;1&quot;)</span></span><br><span class="line">        <span class="comment">// 如果是多次访问,就再次数上+1</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="type">boolean</span>  <span class="variable">flag</span> <span class="operator">=</span><span class="literal">false</span> ;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> !=cookies)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cookieName</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">                <span class="keyword">if</span>(cookieName.equals(<span class="string">&quot;servlet3&quot;</span>))&#123;</span><br><span class="line">                    <span class="comment">// 创建Cookie次数+1</span></span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> Integer.parseInt(cookie.getValue())+<span class="number">1</span>;</span><br><span class="line">                    Cookie c=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;servlet3&quot;</span>, String.valueOf(value));</span><br><span class="line">                    resp.addCookie(c);</span><br><span class="line">                    System.out.println(<span class="string">&quot;欢迎您第&quot;</span>+value+<span class="string">&quot;访问&quot;</span>);</span><br><span class="line">                    flag=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;欢迎您第一次访问&quot;</span>);</span><br><span class="line">            Cookie c=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;servlet3&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">            resp.addCookie(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><h3 id="案例-判断用户是否登录"><a href="#案例-判断用户是否登录" class="headerlink" title="案例:判断用户是否登录"></a>案例:判断用户是否登录</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求:"></a>需求:</h4><p>实现登录一次即可,在一次会话内,可以反复多次访问WEB-INF/ welcome.html,如果没有登录过,跳转到登录页,登录成功后,可以访问</p>
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构:"></a>项目结构:</h4><img src="/2022/05/07/JavaEE/20210805142941-20220507093631639.png" alt="image-20210805142907533" style="zoom:67%;">

<h4 id="组件介绍："><a href="#组件介绍：" class="headerlink" title="组件介绍："></a>组件介绍：</h4><h5 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;loginServlet.do&quot;</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="main-html"><a href="#main-html" class="headerlink" title="main.html"></a>main.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   this is main page</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="LoginServlet"><a href="#LoginServlet" class="headerlink" title="LoginServlet"></a>LoginServlet</h5><p>用来校验登录的，登陆成功将用户信息存户HttpSession，否则返回到登录页。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/loginServlet.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取用户名和密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果用户名和密码为 msb 1234</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;msb&quot;</span>.equals(username)  &amp;&amp; <span class="string">&quot;1234&quot;</span>.equals(password))&#123;</span><br><span class="line">            <span class="comment">// 将用户信息放在HTTPSession中</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&quot;msb&quot;</span>, <span class="string">&quot;1234&quot;</span>);</span><br><span class="line">            <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">            session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">            <span class="comment">// 登录成功 跳转至 main.html</span></span><br><span class="line">            resp.sendRedirect(req.getContextPath()+<span class="string">&quot;/mainServlet.do&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 登录失败 回到login.html</span></span><br><span class="line">            resp.sendRedirect(req.getContextPath()+<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="MainServlet"><a href="#MainServlet" class="headerlink" title="MainServlet"></a>MainServlet</h5><p>用来向mian.html中跳转的，同时验证登录的，可以直接跳转，否则回到登录页。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/mainServlet.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//跳转至main.html</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != user)&#123;</span><br><span class="line">            <span class="comment">// 判断如果登录过 允许跳转  HTTPSession中如果有登陆过的信息</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/main.html&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 如果没有登录过 回到登录去登录  HTTPSession中如果有登陆过的信息</span></span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;login.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="User"><a href="#User" class="headerlink" title="User"></a>User</h5><p>存储用户信息的实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String realname;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String pasword;</span><br></pre></td></tr></table></figure>





<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="指令标签"><a href="#指令标签" class="headerlink" title="指令标签"></a>指令标签</h2><p>三种指令标签</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;%@ page %&gt;</td>
<td>定义网页依赖属性，如脚本语言，error页面、缓存需求等</td>
</tr>
<tr>
<td>&lt;%@ include %&gt;</td>
<td>包含其他文件</td>
</tr>
<tr>
<td>&lt;%@ taglib%</td>
<td>引入标签库的定义</td>
</tr>
</tbody></table>
<h3 id="page标签"><a href="#page标签" class="headerlink" title="page标签"></a>page标签</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%--告知浏览器以什么格式和编码解析 响应的数据--%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>  %&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--设置JSP页面转换的语言--%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%@ page language=<span class="string">&quot;java&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--导包--%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.msb.entity.User&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--在转换成java代码时使用的编码 一般不用设置--%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%@ page pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--指定错误页 当页面发生错误时 指定跳转的页面--%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%@ page errorPage=<span class="string">&quot;error500.JSP&quot;</span> %&gt;</span><br><span class="line">    &lt;%--指定当前页为异常提示页 当前页面可以接收异常对象 --%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%<span class="meta">@page</span> isErrorPage=<span class="string">&quot;true&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>



<p>errorPage是一种处理错误提示也的功能除了JSP有的错误提示页功能</p>
<p>javaEE中自带其他的错位提示页处理功能，具体配置如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error500.JSP<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error404.JSP<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当JSP中发生了异常时,如果JSP中配置的错误页和web.xml 中配置的错误页冲突了,JSP page指令的 errorPage优先级更高</p>
<img src="/2022/05/07/JavaEE/20210807110128-20220507093631490.png" alt="image-20210807110126899" style="zoom:67%;">



<h3 id="include标签"><a href="#include标签" class="headerlink" title="include标签"></a>include标签</h3><p>JSP可以通过Include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。除了include指令标签可以实现引入以外，使用jsp:include也可以实现引入</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--静态引入使用的是 include 指令标签</span><br><span class="line"></span><br><span class="line">    被引入的JSP页面不会生成java代码 被引入的网页和当前页生成代码后形成了一个java文件--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;head.JSP&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--动态引入 JSP标签中的 include选项</span><br><span class="line"></span><br><span class="line">    被引入的JSP页面会生成独立的java代码 </span><br><span class="line"></span><br><span class="line">    在生成的java代码中 使用JSPRuntimeLibrary.include(request, response, <span class="string">&quot;head.JSP&quot;</span>, out, <span class="literal">false</span>);引入其他页面</span><br><span class="line"></span><br><span class="line">    --%&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;head.JSP&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>查看转译以后的java源代码文件中的区别</p>
<p>静态引入：@include被引入的网页和当前页生成代码后形成了一个java文件</p>
<p>动态引入：jsp:include被引入的JSP页面会生成独立的java代码</p>
<h3 id="taglib指令标签"><a href="#taglib指令标签" class="headerlink" title="taglib指令标签"></a>taglib指令标签</h3><p>JSP API允许用户自定义标签，一个自定义标签库就是自定义标签的集合。Taglib指令引入一个自定义标签集合的定义，包括库路径、自定义标签。</p>
<p>语法：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib   uri=<span class="string">&quot;uri&quot;</span> prefix=<span class="string">&quot;prefixOfTag&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>



<h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="九大对象"><a href="#九大对象" class="headerlink" title="九大对象"></a>九大对象</h3><p><strong>四大域对象</strong></p>
<ul>
<li><p>pageContext  page域     当前页面内可用</p>
</li>
<li><p>request       reqeust域  单次请求</p>
</li>
<li><p>session       session域   单次会话</p>
</li>
<li><p>application   application 域项目运行</p>
</li>
</ul>
<p><strong>响应对象</strong></p>
<ul>
<li>response </li>
</ul>
<p><strong>输出流对象</strong></p>
<ul>
<li>out 打印流</li>
</ul>
<p><strong>其他三个对象</strong></p>
<ul>
<li><p>servletConfig:由于JSP本身也是一个Servlet,所以容器也会给我们准备一个ServletConfig</p>
</li>
<li><p>page        就是他this对象 当前JSP对象本身  </p>
</li>
<li><p>exception   异常对象,在错误提示页上使用,当isErrorpage=true 才具有该对象</p>
</li>
</ul>
<h2 id="案例一：在浏览器上访问Emp表-动态地分等级"><a href="#案例一：在浏览器上访问Emp表-动态地分等级" class="headerlink" title="案例一：在浏览器上访问Emp表 动态地分等级"></a>案例一：在浏览器上访问Emp表 动态地分等级</h2><p>EmpDaoImpl.java</p>
<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mydb?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String password=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Emp&gt; list =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        PreparedStatement pstat=<span class="literal">null</span>;</span><br><span class="line">        ResultSet resultSet=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">            pstat = connection.prepareStatement(<span class="string">&quot;select * from emp&quot;</span>);</span><br><span class="line">            resultSet = pstat.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                Integer empno=resultSet.getInt(<span class="string">&quot;empno&quot;</span>);</span><br><span class="line">                Integer deptno=resultSet.getInt(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">                Integer mgr=resultSet.getInt(<span class="string">&quot;mgr&quot;</span>);</span><br><span class="line">                String ename=resultSet.getString(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line">                String job=resultSet.getString(<span class="string">&quot;job&quot;</span>);</span><br><span class="line">                Double sal=resultSet.getDouble(<span class="string">&quot;sal&quot;</span>);</span><br><span class="line">                Double comm=resultSet.getDouble(<span class="string">&quot;comm&quot;</span>);</span><br><span class="line">                Date hiredate=resultSet.getDate(<span class="string">&quot;hiredate&quot;</span>);</span><br><span class="line">                <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Emp</span>( empno,  ename,  job,  mgr,  hiredate,  sal,  comm,  deptno);</span><br><span class="line">                list.add(emp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span>!=resultSet)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span>!=pstat)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    pstat.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span>!=connection)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Emp.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    List&lt;Emp&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>EmpServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/empServlet.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// dao对象</span></span><br><span class="line">    EmpDao empDao=<span class="keyword">new</span> <span class="title class_">EmpDaoImpl</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; list = empDao.findAll();</span><br><span class="line">        <span class="comment">// 将数据放入请求域</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;emps&quot;</span>, list);</span><br><span class="line">        <span class="comment">// 请求转发给JSP</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;showEmp.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>showEmp.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.msb.pojo.Emp&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        table&#123;</span><br><span class="line">            border: 3px solid blue;</span><br><span class="line">            width: <span class="number">80</span>%;</span><br><span class="line">            margin: 0px auto;</span><br><span class="line">        &#125;</span><br><span class="line">        td,th&#123;</span><br><span class="line">            border: 2px solid green;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table cellspacing=<span class="string">&quot;0px&quot;</span> cellpadding=<span class="string">&quot;0px&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;上级编号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;职务&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;入职日期&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;薪资&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;补助&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;部门号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;薪资等级&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            List&lt;Emp&gt; emps = (List&lt;Emp&gt;) request.getAttribute(<span class="string">&quot;emps&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Emp emp : emps) &#123;</span><br><span class="line">        %&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=emp.getEmpno()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=emp.getEname()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=emp.getMgr()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=emp.getJob()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=emp.getHiredate()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=emp.getSal()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=emp.getComm()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=emp.getDeptno()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%--out.print(<span class="string">&quot;&lt;td&gt;&quot;</span>)--%&gt;</span><br><span class="line">         &lt;%</span><br><span class="line">             <span class="type">Double</span> <span class="variable">sal</span> <span class="operator">=</span> emp.getSal();</span><br><span class="line">             <span class="keyword">if</span>(sal&lt;=<span class="number">500</span>)&#123;</span><br><span class="line">                 out.print(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">             &#125;<span class="keyword">else</span> <span class="keyword">if</span>( sal &lt;=<span class="number">1000</span>)&#123;</span><br><span class="line">                 out.print(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">             &#125;<span class="keyword">else</span> <span class="keyword">if</span>( sal &lt;=<span class="number">1500</span>)&#123;</span><br><span class="line">                 out.print(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">             &#125;<span class="keyword">else</span> <span class="keyword">if</span>( sal &lt;=<span class="number">2000</span>)&#123;</span><br><span class="line">                 out.print(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">             &#125;<span class="keyword">else</span> <span class="keyword">if</span>( sal &lt;=<span class="number">3000</span>)&#123;</span><br><span class="line">                 out.print(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">             &#125;<span class="keyword">else</span> <span class="keyword">if</span>( sal &lt;=<span class="number">4000</span>)&#123;</span><br><span class="line">                 out.print(<span class="string">&quot;F&quot;</span>);</span><br><span class="line">             &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                 out.print(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         %&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><p>Expression Languaga</p>
<p>EL表达式中定义了一些可以帮助我们快捷从域对象中取出数据的写法,<strong>基本语法为</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;域标志.数据名.属性名(可选)&#125;</span><br></pre></td></tr></table></figure>

<p><strong>四个域标志关键字分别为</strong></p>
<ul>
<li><p>requestScope         request域</p>
</li>
<li><p>sessionScope          session域</p>
</li>
<li><p>applicationScope   application域</p>
</li>
<li><p>pageScope             page域</p>
</li>
</ul>
<h3 id="EL表达式快捷取出域对象"><a href="#EL表达式快捷取出域对象" class="headerlink" title="EL表达式快捷取出域对象"></a>EL表达式快捷取出域对象</h3><ul>
<li><p>requestScope         request域</p>
</li>
<li><p>sessionScope          session域</p>
</li>
<li><p>applicationScope   application域</p>
</li>
<li><p>pageScope             page域</p>
</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.msb.pojo.User&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;%--向pageContext域中放数据--%&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;pageContextMessage&quot;</span>);</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;userx&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;大黄&quot;</span>,<span class="string">&quot;abcdefg&quot;</span>));</span><br><span class="line">        %&gt;</span><br><span class="line">        &lt;%--</span><br><span class="line">    从域中取出数据</span><br><span class="line">    El表达式在获取对象属性值得时候,是通过对象的属性的get方法获取的</span><br><span class="line">    保证对象的要获取的属性必须有对应get方法才可以</span><br><span class="line">    EL表达式在使用时是不需要<span class="keyword">import</span>其他类的</span><br><span class="line">    El如果获取的是NULL值,是不展示任何信息的</span><br><span class="line">    --%&gt;</span><br><span class="line">        pageContext域中的数据:&lt;br/&gt;</span><br><span class="line">        msg:$&#123;pageScope.msg&#125;&lt;br/&gt;</span><br><span class="line">        username:$&#123;pageScope.userx.name&#125;&lt;br/&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        request域中的数据:&lt;br/&gt;</span><br><span class="line">        msg:$&#123;requestScope.msg&#125;&lt;br/&gt;</span><br><span class="line">        username:$&#123;requestScope.user.name&#125;&lt;br/&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        session域中的数据:&lt;br/&gt;</span><br><span class="line">        msg:$&#123;sessionScope.msg&#125;&lt;br/&gt;</span><br><span class="line">        username:$&#123;sessionScope.users[<span class="number">1</span>].name&#125;&lt;br/&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        application域中的数据:&lt;br/&gt;</span><br><span class="line">        msg:$&#123;applicationScope.msg&#125;&lt;br/&gt;</span><br><span class="line">        username:$&#123;applicationScope.userMap.a.name&#125;&lt;br/&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;%--EL表达式在取出数据的时候是可以省略域标志的</span><br><span class="line">    EL表达式会自动依次到四个域中去找数据</span><br><span class="line">    --%&gt;</span><br><span class="line">        PageContext username:$&#123;userx.name&#125;&lt;br/&gt;</span><br><span class="line">        Request username:$&#123;user.name&#125;&lt;br/&gt;</span><br><span class="line">        Session username:$&#123;users[<span class="number">1</span>].name&#125;&lt;br/&gt;</span><br><span class="line">        Application username:$&#123;userMap.a.name&#125;&lt;br/&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;%--</span><br><span class="line">    $&#123;数据的名字&#125;如果省略域标志,取数据的顺序如下</span><br><span class="line">    pageContext</span><br><span class="line">    request</span><br><span class="line">    session</span><br><span class="line">    application</span><br><span class="line">    --%&gt;</span><br><span class="line">        $&#123;msg&#125;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;%--</span><br><span class="line">    移除域中的数据</span><br><span class="line">    --%&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        <span class="comment">//pageContext.removeAttribute(&quot;msg&quot;);// pageContext.removeAttribute()方法会移除四个域中的所有的同名的数据</span></span><br><span class="line">        <span class="comment">//request.removeAttribute(&quot;msg&quot;);</span></span><br><span class="line">        %&gt;</span><br><span class="line">        pagecontextMsg:$&#123;pageScope.msg&#125;&lt;br/&gt;</span><br><span class="line">        requestMsg:$&#123;requestScope.msg&#125;&lt;br/&gt;</span><br><span class="line">        sessionMsg:$&#123;sessionScope.msg&#125;&lt;br/&gt;</span><br><span class="line">        applicationMsg:$&#123;applicationScope.msg&#125;&lt;br/&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;%--</span><br><span class="line">    EL表达式获取请求中的参数</span><br><span class="line">    --%&gt;</span><br><span class="line">        username:$&#123;param.username&#125;&lt;br/&gt;</span><br><span class="line">        hobby:$&#123;paramValues.hobby[<span class="number">0</span>]&#125;</span><br><span class="line">        hobby:$&#123;paramValues.hobby[<span class="number">1</span>]&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul>
<li><p>EL表达式定义在JSP页面上,在转译之后的java文件中,会被转化成java代码</p>
</li>
<li><p>EL表达式是一种后台技术,服务器上运行,不是在浏览器上运行,不能用于HTML页面</p>
</li>
<li><p>EL表达式底层是通过反射实现的,在获取对象属性值时是通过对象的get方法实现的</p>
</li>
</ul>
<h3 id="EL表达式运算符"><a href="#EL表达式运算符" class="headerlink" title="EL表达式运算符"></a>EL表达式运算符</h3><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p><strong>算数运算符</strong>: + - * / %</p>
<p><strong>比较运算符:</strong> </p>
<p>==  eq equals</p>
<p>&gt;gt greater then</p>
<p>&lt;     lt   lower then</p>
<p>&gt;=  ge  greater then or equals</p>
<p>&lt;=  le   lower then or equals</p>
<p>!=   ne   not equals</p>
<p><strong>逻辑运算符</strong>: || or    &amp;&amp; and </p>
<p><strong>三目运算符</strong>: ${条件 ?表达式1 : 表达式2}</p>
<p><strong>判空运算符</strong>: empty</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">+两端如果有字符串,会尝试将字符串转换成数字之后进行加法运算</span><br><span class="line">/如果除以<span class="number">0</span> 结果为Infinity 而不是出现异常</span><br><span class="line">%如果和<span class="number">0</span>取余数,那么会出现异常</span><br><span class="line">--%&gt;</span><br><span class="line">    算数运算符：</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    $&#123;<span class="number">10</span> + <span class="number">10</span>&#125;&lt;br/&gt;</span><br><span class="line">    $&#123;<span class="string">&quot;10&quot;</span> + <span class="number">10</span>&#125;&lt;br/&gt;</span><br><span class="line">    $&#123;<span class="string">&quot;10&quot;</span> + <span class="string">&quot;10&quot;</span>&#125;&lt;br/&gt;</span><br><span class="line">    &lt;%--$&#123;<span class="string">&quot;10a&quot;</span> + <span class="number">10</span>&#125;&lt;br/&gt;--%&gt;</span><br><span class="line">    $&#123;<span class="number">10</span>/<span class="number">0</span>&#125;&lt;br/&gt;</span><br><span class="line">    &lt;%-- $&#123;<span class="number">10</span>%<span class="number">0</span>&#125;&lt;br/&gt;--%&gt;</span><br><span class="line">    关系运算符/比较运算符</span><br><span class="line">    &lt;%--</span><br><span class="line">    比较运算符推荐写成字母形式,不推荐使用 == &gt;=  &lt;=</span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    $&#123;<span class="number">10</span> == <span class="number">10</span>&#125;&lt;br/&gt;</span><br><span class="line">    $&#123;<span class="number">10</span> eq <span class="number">10</span>&#125;&lt;br/&gt;</span><br><span class="line">    $&#123;<span class="number">10</span> gt <span class="number">8</span>&#125;&lt;br/&gt;</span><br><span class="line">    逻辑运算符</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    $&#123; <span class="literal">true</span> || <span class="literal">false</span>&#125;&lt;br/&gt;</span><br><span class="line">    $&#123; <span class="literal">true</span> or <span class="literal">false</span>&#125;&lt;br/&gt;</span><br><span class="line">    $&#123; <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>&#125;&lt;br/&gt;</span><br><span class="line">    $&#123; <span class="literal">true</span> and <span class="literal">false</span>&#125;&lt;br/&gt;</span><br><span class="line">    条件运算符/三目运算符</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    $&#123;(<span class="number">100</span>-<span class="number">1</span>)%<span class="number">3</span>==<span class="number">0</span>?<span class="number">10</span>+<span class="number">1</span>:<span class="number">10</span>-<span class="number">1</span>&#125;&lt;br/&gt;</span><br><span class="line">    判断空运算符</span><br><span class="line">    &lt;%--empty 为<span class="literal">null</span> 则为<span class="literal">true</span>--%&gt;</span><br><span class="line">    &lt;%  <span class="comment">//向域中放入数据</span></span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;a&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] arr =&#123;&#125;;</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;arr&quot;</span>,arr);</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    $&#123;empty a&#125;&lt;br/&gt;</span><br><span class="line">    $&#123;empty b&#125;&lt;br/&gt;&lt;%--字符串长度为<span class="number">0</span> 则认为是空--%&gt;</span><br><span class="line">    $&#123;empty arr&#125;&lt;br/&gt;&lt;%--数组长度为<span class="number">0</span> 认为不是空--%&gt;</span><br><span class="line">    $&#123;empty list&#125;&lt;br/&gt;&lt;%--集合长度为<span class="number">0</span> 认为是空--%&gt;</span><br><span class="line">    $&#123;list.size() eq <span class="number">0</span>&#125;&lt;br/&gt;&lt;%--集合长度为<span class="number">0</span> 认为是空--%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h2 id="案例一优化：使用EL表达式优化查询员工信息的页面处理"><a href="#案例一优化：使用EL表达式优化查询员工信息的页面处理" class="headerlink" title="案例一优化：使用EL表达式优化查询员工信息的页面处理"></a>案例一优化：使用EL表达式优化查询员工信息的页面处理</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.msb.pojo.Emp&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            table&#123;</span><br><span class="line">                border: 3px solid blue;</span><br><span class="line">                width: <span class="number">80</span>%;</span><br><span class="line">                margin: 0px auto;</span><br><span class="line">            &#125;</span><br><span class="line">            td,th&#123;</span><br><span class="line">                border: 2px solid green;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;table cellspacing=<span class="string">&quot;0px&quot;</span> cellpadding=<span class="string">&quot;0px&quot;</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;上级编号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;职务&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;入职日期&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;薪资&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;补助&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;部门号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;薪资等级&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%</span><br><span class="line">            List&lt;Emp&gt; emps = (List&lt;Emp&gt;) request.getAttribute(<span class="string">&quot;emps&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Emp emp : emps) &#123;</span><br><span class="line">                pageContext.setAttribute(<span class="string">&quot;emp&quot;</span>, emp);<span class="comment">//将员工对象放入PageContext 域</span></span><br><span class="line">                %&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;emp.empno&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;emp.ename&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;emp.mgr&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;emp.job&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;emp.hiredate&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;emp.sal&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;emp.comm&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;emp.deptno&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    $&#123;emp.sal le <span class="number">500</span>?<span class="string">&quot;A&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">                    $&#123;emp.sal gt <span class="number">500</span> and emp.sal le <span class="number">1000</span>?<span class="string">&quot;B&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">                    $&#123;emp.sal gt <span class="number">1000</span> and emp.sal le <span class="number">1500</span>?<span class="string">&quot;C&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">                    $&#123;emp.sal gt <span class="number">1500</span> and emp.sal le <span class="number">2000</span>?<span class="string">&quot;D&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">                    $&#123;emp.sal gt <span class="number">2000</span> and emp.sal le <span class="number">3000</span>?<span class="string">&quot;E&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">                    $&#123;emp.sal gt <span class="number">3000</span> and emp.sal le <span class="number">4000</span>?<span class="string">&quot;F&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">                    $&#123;emp.sal gt <span class="number">4000</span>?<span class="string">&quot;G&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%</span><br><span class="line">            &#125;</span><br><span class="line">            %&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><p>JSTL（Java server pages standarded tag library，即JSP标准标签库）是由JCP（Java community Proces）所制定的标准规范，它主要提供给Java Web开发人员一个标准通用的标签库，并由Apache的Jakarta小组来维护。</p>
<p><strong>使用前提</strong></p>
<ol>
<li><p>需要导包 </p>
</li>
<li><p>页面中通过taglib指令引入标签库</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@   taglib uri=<span class="string">&quot;标签库的定位&quot;</span> prefix=<span class="string">&quot;前缀(简称)&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<p>uri可以在对应的tld文件中找到</p>
</li>
</ol>
<h3 id="核心标签库"><a href="#核心标签库" class="headerlink" title="核心标签库"></a>核心标签库</h3><p>导入语句为</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="操作对象的标签c-set-out-remove"><a href="#操作对象的标签c-set-out-remove" class="headerlink" title="操作对象的标签c:set/out/remove"></a>操作对象的标签c:set/out/remove</h4><ul>
<li>==&lt;c:set&gt;==         向域对象中放入数据  setAttribute</li>
<li>==&lt;c:out&gt;==        从域对象中取出数据  getAttribute</li>
<li>==&lt;c:remove&gt;== 从域对象中移除数据   removeAttribute</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">    c:set</span><br><span class="line">        scope 指定放数据的域 可选值 page request session application</span><br><span class="line">        <span class="keyword">var</span>   数据的名称</span><br><span class="line">        value 数据</span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;c:set scope=<span class="string">&quot;page&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;msg&quot;</span> value=<span class="string">&quot;pageMessage&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">    &lt;c:set scope=<span class="string">&quot;request&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;msg&quot;</span> value=<span class="string">&quot;requestMessage&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">    &lt;c:set scope=<span class="string">&quot;session&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;msg&quot;</span> value=<span class="string">&quot;sessionMessage&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">    &lt;c:set scope=<span class="string">&quot;application&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;msg&quot;</span> value=<span class="string">&quot;applicationMessage&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">    &lt;%--移除指定域中的值--%&gt;</span><br><span class="line">   &lt;%-- &lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;msg&quot;</span> scope=<span class="string">&quot;page&quot;</span>&gt;&lt;/c:remove&gt;</span><br><span class="line">    &lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;msg&quot;</span> scope=<span class="string">&quot;request&quot;</span>&gt;&lt;/c:remove&gt;--%&gt;</span><br><span class="line">    &lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;msg&quot;</span> scope=<span class="string">&quot;session&quot;</span>&gt;&lt;/c:remove&gt;</span><br><span class="line">    &lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;msg&quot;</span> scope=<span class="string">&quot;application&quot;</span>&gt;&lt;/c:remove&gt;</span><br><span class="line">    &lt;%--通过EL表达式取出域中的值--%&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    $&#123;pageScope.msg&#125;&lt;br/&gt;</span><br><span class="line">    $&#123;requestScope.msg&#125;&lt;br/&gt;</span><br><span class="line">    $&#123;sessionScope.msg&#125;&lt;br/&gt;</span><br><span class="line">    $&#123;applicationScope.msg &#125;&lt;br/&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;%--通过c:out标签获取域中的值--%&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;pageScope.msg&#125;&quot;</span> <span class="keyword">default</span>=<span class="string">&quot;page msg not found&quot;</span>/&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;requestScope.msg&#125;&quot;</span> <span class="keyword">default</span>=<span class="string">&quot;request msg not found&quot;</span>/&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;sessionScope.msg&#125;&quot;</span> <span class="keyword">default</span>=<span class="string">&quot;session msg not found&quot;</span>/&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;applicationScope.msg&#125;&quot;</span> <span class="keyword">default</span>=<span class="string">&quot;application msg not found&quot;</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="多条件分支标签c-if和c-choose"><a href="#多条件分支标签c-if和c-choose" class="headerlink" title="多条件分支标签c:if和c:choose"></a>多条件分支标签c:if和c:choose</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">    随机生成一个分数  <span class="number">0</span>-<span class="number">100</span></span><br><span class="line">    &gt;=<span class="number">90</span> A</span><br><span class="line">    &gt;=<span class="number">80</span> B</span><br><span class="line">    &gt;=<span class="number">70</span> C</span><br><span class="line">    &gt;=<span class="number">60</span> D</span><br><span class="line">    &lt;<span class="number">60</span>  E</span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">101</span>);</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;score&quot;</span>, score);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    test  判断条件</span><br><span class="line">    c:<span class="keyword">if</span>可以将test的结果放入指定的域中</span><br><span class="line">    scope 指定存放的域</span><br><span class="line">    <span class="keyword">var</span>   数据名</span><br><span class="line">    --%&gt;</span><br><span class="line">    分数:$&#123;score&#125;&lt;br/&gt; 等级:</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;score ge 90&#125;&quot;</span> scope=<span class="string">&quot;page&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;f1&quot;</span>&gt;A&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;score ge 80 and score lt 90&#125;&quot;</span> scope=<span class="string">&quot;page&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;f2&quot;</span>&gt;B&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;score ge 70 and score lt 80&#125;&quot;</span> scope=<span class="string">&quot;page&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;f3&quot;</span>&gt;C&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;score ge 60 and score lt 70&#125;&quot;</span> scope=<span class="string">&quot;page&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;f4&quot;</span>&gt;D&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;score lt 60&#125;&quot;</span> scope=<span class="string">&quot;page&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;f5&quot;</span>&gt;E&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    $&#123;f1&#125;</span><br><span class="line">    $&#123;f2&#125;</span><br><span class="line">    $&#123;f3&#125;</span><br><span class="line">    $&#123;f4&#125;</span><br><span class="line">    $&#123;f5&#125;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;%--输出分数是否及格--%&gt;</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;score ge 60&#125;&quot;</span> scope=<span class="string">&quot;page&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;flag&quot;</span>&gt;及格&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;!pageScope.flag&#125;&quot;</span>&gt;不及格&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;c:choose&gt;</span><br><span class="line">        &lt;c:when test=<span class="string">&quot;$&#123;score ge 90&#125;&quot;</span>&gt;A&lt;/c:when&gt;</span><br><span class="line">        &lt;c:when test=<span class="string">&quot;$&#123;score ge 80&#125;&quot;</span>&gt;B&lt;/c:when&gt;</span><br><span class="line">        &lt;c:when test=<span class="string">&quot;$&#123;score ge 70&#125;&quot;</span>&gt;C&lt;/c:when&gt;</span><br><span class="line">        &lt;c:when test=<span class="string">&quot;$&#123;score ge 60&#125;&quot;</span>&gt;D&lt;/c:when&gt;</span><br><span class="line">        &lt;c:otherwise&gt;E&lt;/c:otherwise&gt;</span><br><span class="line">    &lt;/c:choose&gt;</span><br></pre></td></tr></table></figure>

<h4 id="迭代标签c-foreach"><a href="#迭代标签c-foreach" class="headerlink" title="迭代标签c:foreach"></a>迭代标签c:foreach</h4><h5 id="打印乘法表"><a href="#打印乘法表" class="headerlink" title="打印乘法表"></a>打印乘法表</h5><p>c:forEach中的<strong>属性</strong></p>
<ul>
<li>==var==: 迭代变量, 存放在pageContext作用域</li>
<li>==begin==: 迭代起始值</li>
<li>==end==: 迭代结束值</li>
<li>==step==: 迭代变量变化的步长</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>;i&lt;=<span class="number">9</span> ;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;i&quot;</span>,i)</span><br><span class="line">    &#125;</span><br><span class="line">c:foreach 每次执时都会向page域中放入一个名为 i 值为当前值这样的一个操作</span><br><span class="line">    --%&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span> begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;9&quot;</span> step=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;j&quot;</span> begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;$&#123;i&#125;&quot;</span> step=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">        $&#123;j&#125; * $&#123;i&#125; = $&#123;i*j&#125; &amp;nbsp;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>

<h5 id="遍历对象数组"><a href="#遍历对象数组" class="headerlink" title="遍历对象数组"></a>遍历对象数组</h5><ul>
<li>==items==: 要遍历的集合, 需要使用EL表达式取值</li>
<li>==varStatus==: 迭代变量的状态</li>
<li>==index:== 索引, 从0开始</li>
<li>==count:== 计数, 从1开始</li>
<li>==first==: boolean, 表示是否是第一个</li>
<li>==last==: boolean, 表示是否是最后一个</li>
<li>==current==: 对象, 当前迭代的对象值</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--&lt;%<span class="comment">//原来的遍历</span></span><br><span class="line">       List&lt;Emp&gt; emps = (List&lt;Emp&gt;) request.getAttribute(<span class="string">&quot;emps&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (Emp emp : emps) &#123;</span><br><span class="line">           pageContext.setAttribute(<span class="string">&quot;emp&quot;</span>, emp);<span class="comment">//将员工对象放入PageContext 域</span></span><br><span class="line">       %&gt;</span><br><span class="line">       c:foreach</span><br><span class="line">       --%&gt;</span><br><span class="line">       &lt;c:forEach items=<span class="string">&quot;$&#123;emps&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;emp&quot;</span> varStatus=<span class="string">&quot;empStatus&quot;</span>&gt;</span><br></pre></td></tr></table></figure>



<h3 id="格式化标签库fmt"><a href="#格式化标签库fmt" class="headerlink" title="格式化标签库fmt"></a>格式化标签库fmt</h3><h4 id="导入标签"><a href="#导入标签" class="headerlink" title="导入标签"></a>导入标签</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span>%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="lt-fmt-formatDate-gt-日期格式标签"><a href="#lt-fmt-formatDate-gt-日期格式标签" class="headerlink" title="&lt;fmt:formatDate&gt;日期格式标签"></a>&lt;fmt:formatDate&gt;日期格式标签</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;td&gt;</span><br><span class="line">    &lt;fmt:formatDate value=<span class="string">&quot;$&#123;emp.hiredate&#125;&quot;</span> pattern=<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>/&gt;</span><br><span class="line">&lt;/td&gt;</span><br></pre></td></tr></table></figure>

<h4 id="数字格式化标签"><a href="#数字格式化标签" class="headerlink" title="数字格式化标签"></a>数字格式化标签</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;td&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    <span class="number">0</span> 代表必须有一位数字,如果对应的位置没有值怎么办?自动补充<span class="number">0</span></span><br><span class="line">    # 代表有一位数字,开头和结尾的所有的<span class="number">0</span>不保留</span><br><span class="line">    --%&gt;</span><br><span class="line">    &amp;yen;&lt;fmt:formatNumber value=<span class="string">&quot;$&#123;emp.sal&#125;&quot;</span> pattern=<span class="string">&quot;###,##0.00&quot;</span>/&gt;</span><br><span class="line">&lt;/td&gt;</span><br></pre></td></tr></table></figure>



<h2 id="showEmp-js页面最终优化"><a href="#showEmp-js页面最终优化" class="headerlink" title="showEmp.js页面最终优化"></a>showEmp.js页面最终优化</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            table&#123;</span><br><span class="line">                border: 3px solid blue;</span><br><span class="line">                width: <span class="number">80</span>%;</span><br><span class="line">                margin: 0px auto;</span><br><span class="line">            &#125;</span><br><span class="line">            td,th&#123;</span><br><span class="line">                border: 2px solid green;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;table cellspacing=<span class="string">&quot;0px&quot;</span> cellpadding=<span class="string">&quot;0px&quot;</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;索引&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;isFirst&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;isLast&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;上级编号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;职务&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;入职日期&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;薪资&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;补助&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;部门号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;薪资等级&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%-- &lt;%</span><br><span class="line">    List&lt;Emp&gt; emps = (List&lt;Emp&gt;) request.getAttribute(<span class="string">&quot;emps&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Emp emp : emps) &#123;</span><br><span class="line">                pageContext.setAttribute(<span class="string">&quot;emp&quot;</span>,emp);<span class="comment">//将员工对象放入PageContext域</span></span><br><span class="line">                %&gt;</span><br><span class="line">            c:foreach</span><br><span class="line">            items 要遍历的数组/List  可以通过EL表达式取出集合之后给改属性赋值</span><br><span class="line">            <span class="keyword">var</span>   中间变量的名称</span><br><span class="line">            varStatus 记录每一个对象状态的设置</span><br><span class="line">            count 个数</span><br><span class="line">            index 索引</span><br><span class="line">            first 如果当前元素是迭代的第一个元素 <span class="literal">true</span> 否则为<span class="literal">false</span></span><br><span class="line">            last  如果当前元素是迭代的最后一个元素 <span class="literal">true</span> 否则为<span class="literal">false</span></span><br><span class="line">            current 当前迭代的元素本身</span><br><span class="line">            --%&gt;</span><br><span class="line">            &lt;c:forEach items=<span class="string">&quot;$&#123;emps&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;emp&quot;</span> varStatus=<span class="string">&quot;empStatus&quot;</span>&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;%--使用EL表达式来取出域对象里的对象属性值--%&gt;</span><br><span class="line">                    &lt;%-- &lt;td&gt;&lt;%=emp.getEmpno()%&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%=emp.getEname()%&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%=emp.getMgr()%&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%=emp.getJob()%&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%=emp.getHiredate()%&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%=emp.getSal()%&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%=emp.getComm()%&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%=emp.getDeptno()%&gt;&lt;/td&gt;--%&gt;</span><br><span class="line">            &lt;td&gt;$&#123;empStatus.count&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;empStatus.index&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;empStatus.first&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;empStatus.last&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;emp.empno&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;emp.ename&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;empStatus.current.ename&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;emp.mgr&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;emp.job&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;fmt:formatDate value=<span class="string">&quot;$&#123;emp.hiredate&#125;&quot;</span> pattern=<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;%--</span><br><span class="line">    <span class="number">0</span> 代表必须有一位数字,如果对应的位置没有值怎么办?自动补充<span class="number">0</span></span><br><span class="line">    # 代表有一位数字,开头和结尾的所有的<span class="number">0</span>不保留</span><br><span class="line">    --%&gt;</span><br><span class="line"></span><br><span class="line">                &amp;yen;&lt;fmt:formatNumber value=<span class="string">&quot;$&#123;emp.sal&#125;&quot;</span> pattern=<span class="string">&quot;###,##0.00&quot;</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;emp.comm&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;emp.deptno&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%--out.print(<span class="string">&quot;&lt;td&gt;&quot;</span>)--%&gt;</span><br><span class="line">                &lt;%--&lt;%</span><br><span class="line">    	<span class="type">Double</span> <span class="variable">sal</span> <span class="operator">=</span> emp.getSal();</span><br><span class="line">                <span class="keyword">if</span>(sal&lt;=<span class="number">500</span>)&#123;</span><br><span class="line">                    out.print(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>( sal &lt;=<span class="number">1000</span>)&#123;</span><br><span class="line">                    out.print(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>( sal &lt;=<span class="number">1500</span>)&#123;</span><br><span class="line">                    out.print(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>( sal &lt;=<span class="number">2000</span>)&#123;</span><br><span class="line">                    out.print(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>( sal &lt;=<span class="number">3000</span>)&#123;</span><br><span class="line">                    out.print(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>( sal &lt;=<span class="number">4000</span>)&#123;</span><br><span class="line">                    out.print(<span class="string">&quot;F&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    out.print(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                %&gt;--%&gt;</span><br><span class="line">                &lt;%--使用EL算数表达式来判断等级</span><br><span class="line">    $&#123;emp.sal le <span class="number">500</span>?<span class="string">&quot;A&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">                $&#123;emp.sal gt <span class="number">500</span> and emp.sal le <span class="number">1000</span>?<span class="string">&quot;B&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">                $&#123;emp.sal gt <span class="number">1000</span> and emp.sal le <span class="number">1500</span>?<span class="string">&quot;C&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">                $&#123;emp.sal gt <span class="number">1500</span> and emp.sal le <span class="number">2000</span>?<span class="string">&quot;D&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">                $&#123;emp.sal gt <span class="number">2000</span> and emp.sal le <span class="number">3000</span>?<span class="string">&quot;E&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">                $&#123;emp.sal gt <span class="number">3000</span> and emp.sal le <span class="number">4000</span>?<span class="string">&quot;F&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">                $&#123;emp.sal gt <span class="number">4000</span>?<span class="string">&quot;G&quot;</span>:<span class="string">&quot;&quot;</span>&#125;--%&gt;</span><br><span class="line"></span><br><span class="line">                &lt;%--使用JSTL标签--%&gt;</span><br><span class="line">                &lt;c:choose&gt;</span><br><span class="line">                    &lt;c:when test=<span class="string">&quot;$&#123;emp.sal le 500&#125;&quot;</span>&gt;A&lt;/c:when&gt;</span><br><span class="line">                    &lt;c:when test=<span class="string">&quot;$&#123;emp.sal le 1000&#125;&quot;</span>&gt;B&lt;/c:when&gt;</span><br><span class="line">                    &lt;c:when test=<span class="string">&quot;$&#123;emp.sal le 1500&#125;&quot;</span>&gt;C&lt;/c:when&gt;</span><br><span class="line">                    &lt;c:when test=<span class="string">&quot;$&#123;emp.sal le 2000&#125;&quot;</span>&gt;D&lt;/c:when&gt;</span><br><span class="line">                    &lt;c:when test=<span class="string">&quot;$&#123;emp.sal le 3000&#125;&quot;</span>&gt;E&lt;/c:when&gt;</span><br><span class="line">                    &lt;c:when test=<span class="string">&quot;$&#123;emp.sal le 4000&#125;&quot;</span>&gt;F&lt;/c:when&gt;</span><br><span class="line">                    &lt;c:when test=<span class="string">&quot;$&#123;emp.sal gt 4000&#125;&quot;</span>&gt;G&lt;/c:when&gt;</span><br><span class="line">                &lt;/c:choose&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><h2 id="案例：通过过滤验证登录"><a href="#案例：通过过滤验证登录" class="headerlink" title="案例：通过过滤验证登录"></a>案例：通过过滤验证登录</h2><p>需求：通过过滤器控制，只有登陆之后可以反复进入welcome.jsp欢迎页，如果没有登录，提示用户进入登录页进行登陆操作。</p>
<img src="/2022/05/07/JavaEE/20210808090141-20220507093631591.png" alt="image-20210808090117141" style="zoom:50%;">

<h6 id="login-jsp"><a href="#login-jsp" class="headerlink" title="login.jsp"></a>login.jsp</h6><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title%sSourceCode%lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;img src=<span class="string">&quot;static/img/logo.png&quot;</span>&gt;</span><br><span class="line">  please login ... ... &lt;br/&gt;</span><br><span class="line">  &lt;form action=<span class="string">&quot;loginController.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user&quot;</span>&gt; &lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pwd&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h6 id="welcome-jsp"><a href="#welcome-jsp" class="headerlink" title="welcome.jsp"></a>welcome.jsp</h6><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;static/img/logo.png&quot;</span>&gt;</span><br><span class="line">欢迎$&#123;user.username&#125;登陆!!!</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="aaa-jsp"><a href="#aaa-jsp" class="headerlink" title="aaa.jsp"></a>aaa.jsp</h6><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="built_in">this</span> is page aaa</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>准备Controller代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/loginController.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取用户名和密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        <span class="comment">// 链接数据库校验登录</span></span><br><span class="line">        <span class="comment">// 登录成功,将用户信息放入Session域</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">User</span>(username,password);</span><br><span class="line">        req.getSession().setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="comment">// 跳转到欢迎页</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;welcome.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>准备登录控制过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span><span class="comment">// 任何资源都要进行过滤,</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter1_LoginFilter</span>  <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        HttpServletRequest req=(HttpServletRequest)servletRequest;</span><br><span class="line">        HttpServletResponse resp=(HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">//无论是否登录过,都要放行的资源   登录页  登录校验Controller 和一些静态资源</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line">        System.out.println(requestURI);</span><br><span class="line">        <span class="keyword">if</span>(requestURI.contains(<span class="string">&quot;login.jsp&quot;</span>)|| requestURI.contains(<span class="string">&quot;loginController.do&quot;</span>)|| requestURI.contains(<span class="string">&quot;/static/&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// 直接放行</span></span><br><span class="line">            filterChain.doFilter(req,resp);</span><br><span class="line">            <span class="comment">// 后续代码不再执行</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 需要登录之后才能访问的资源,如果没登录,重定向到login.jsp上,提示用户进行登录</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != user)&#123;<span class="comment">// 如果登录过 放行</span></span><br><span class="line">            filterChain.doFilter(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// 没有登录过,跳转至登录页</span></span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h1><h2 id="案例：记录请求日志"><a href="#案例：记录请求日志" class="headerlink" title="案例：记录请求日志"></a>案例：记录请求日志</h2><h6 id="RequestLoginListener-java"><a href="#RequestLoginListener-java" class="headerlink" title="RequestLoginListener.java"></a>RequestLoginListener.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestLogListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SimpleDateFormat simpleDateFormat=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="comment">// 获得请求发出的IP</span></span><br><span class="line">        <span class="comment">// 获得请求的URL</span></span><br><span class="line">        <span class="comment">// 获得请求产生的时间</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)sre.getServletRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteHost</span> <span class="operator">=</span> request.getRemoteHost();</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURL</span> <span class="operator">=</span> request.getRequestURL().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">reqquestDate</span> <span class="operator">=</span> simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">// 准备输出流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/msb.txt&quot;</span>),<span class="literal">true</span>));</span><br><span class="line">            pw.println(remoteHost+<span class="string">&quot; &quot;</span>+requestURL+<span class="string">&quot; &quot;</span>+reqquestDate );</span><br><span class="line">            pw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="案例：显示在线人数"><a href="#案例：显示在线人数" class="headerlink" title="案例：显示在线人数"></a>案例：显示在线人数</h2><p><strong>需求</strong>：开启一次会话session 在线人数加一 销毁会话以后在线人数减一</p>
<p>使用count来计数，然后<strong>存在application域中</strong></p>
<h6 id="OnlineNumberListener"><a href="#OnlineNumberListener" class="headerlink" title="OnlineNumberListener:"></a>OnlineNumberListener:</h6><p>获取application域对象，存入数据count，如果一次session开启，++count；一次session关闭，–count</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnlineNumberListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="comment">//向application域中增加一个数字</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">count</span> <span class="operator">=</span> application.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == count) &#123;</span><br><span class="line">            <span class="comment">//第一次放入数据</span></span><br><span class="line">            application.setAttribute(<span class="string">&quot;count&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">int</span>) count;</span><br><span class="line">            application.setAttribute(<span class="string">&quot;count&quot;</span>, ++c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="comment">//向application域中减少一个数字</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">count</span> <span class="operator">=</span> application.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> (<span class="type">int</span>) count;</span><br><span class="line">        application.setAttribute(<span class="string">&quot;count&quot;</span>,--count1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="案例：重启免登录"><a href="#案例：重启免登录" class="headerlink" title="案例：重启免登录"></a>案例：重启免登录</h2><h3 id="Session序列化和反序列化"><a href="#Session序列化和反序列化" class="headerlink" title="Session序列化和反序列化"></a>Session序列化和反序列化</h3><p>1、序列化与反序列</p>
<p>把对象转化为字节序列的过程称为序列化（保存到硬盘，持久化）</p>
<p>把字节序列转化为对象的过程称为反序列化（存放于内存）</p>
<p> 2、序列化的用途</p>
<p>把对象的字节序列永久保存到硬盘上，通常放到一个文件中。</p>
<p>把网络传输的对象通过字节序列化，方便传输本节作业</p>
<p>3、实现步骤</p>
<p>想实现序列化和反序列化需要手动配置</p>
<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210808154352-20220507093631697.png" class title="image-20210808154350410">

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.session.PersistentManager&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Store</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.session.FileStore&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;d:/session&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Manager</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>==注意实体类必须实现serializable 接口==</p>
<h3 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h3><h4 id="1-准备实体类"><a href="#1-准备实体类" class="headerlink" title="1 准备实体类"></a>1 准备实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>  <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-开发登录信息输入页面"><a href="#2-开发登录信息输入页面" class="headerlink" title="2 开发登录信息输入页面"></a>2 开发登录信息输入页面</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;loginController.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">  用户名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user&quot;</span>&gt; &lt;br/&gt;</span><br><span class="line">  密码:&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pwd&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>



<h4 id="3开发登录信息验证Servlet"><a href="#3开发登录信息验证Servlet" class="headerlink" title="3开发登录信息验证Servlet"></a>3开发登录信息验证Servlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/loginController.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">    <span class="comment">// user</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">User</span>(username,pwd);</span><br><span class="line">    <span class="comment">// session</span></span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-开发校验当前是否已经登录的Controller"><a href="#4-开发校验当前是否已经登录的Controller" class="headerlink" title="4 开发校验当前是否已经登录的Controller"></a>4 开发校验当前是否已经登录的Controller</h4><p>loginCheckController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/loginCheckController.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 判断是否登录</span></span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">listener</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;listener&quot;</span>);<span class="comment">// 获得对应的监听器</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span><span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">null</span> != user)&#123;</span><br><span class="line">        message=<span class="string">&quot;您已经登录过&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        message=<span class="string">&quot;您还未登录&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">    resp.getWriter().println(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5  测试"></a>5  测试</h4><p>先登录,然后请求loginCheckController.do 校验是否登录过,然后重启项目,再起请求loginCheckController.do 校验是否登录过,发现重启后,仍然是登录过的</p>
<h4 id="6-监听钝化和活化"><a href="#6-监听钝化和活化" class="headerlink" title="6 监听钝化和活化"></a>6 监听钝化和活化</h4><p><strong>MySessionActivationListener.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySessionActivationListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionActivationListener</span>, Serializable &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionWillPassivate</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">    System.out.println(se.getSession().hashCode()+<span class="string">&quot;即将钝化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDidActivate</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">    System.out.println(se.getSession().hashCode()+<span class="string">&quot;已经活化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p><strong>LoginController登录时绑定监听器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@WebServlet(&quot;/loginController.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        <span class="comment">// user</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">User</span>(username,pwd);</span><br><span class="line">        <span class="comment">// session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="comment">// 绑定监听器</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;listener&quot;</span>, <span class="keyword">new</span> <span class="title class_">MySessionActivationListener</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>重启项目 重复测试即可</p>
<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210808161851-20220507093632140.png" class title="image-20210808161834961">

<img src="/2022/05/07/JavaEE/05/07/JavaEE/20210808161855-20220507093631903.png" class title="image-20210808161823274">



]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>javaEE</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2021/05/07/MySQL/</url>
    <content><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><h2 id="1-数据库基本概念"><a href="#1-数据库基本概念" class="headerlink" title="1.数据库基本概念"></a>1.数据库基本概念</h2><h3 id="1-1-数据"><a href="#1-1-数据" class="headerlink" title="1.1 数据"></a>1.1 数据</h3><p>所谓数据（Data）是指对客观事物进行描述并可以鉴别的符号，这些符号是可识别的、抽象的。它不仅仅指狭义上的数字，而是有多种表现形式：字母、文字、文本、图形、音频、视频等。现在计算机存储和处理的数据范围十分广泛，而描述这些数据的符号也变得越来越复杂了。</p>
<h3 id="1-2-数据库"><a href="#1-2-数据库" class="headerlink" title="1.2 数据库"></a>1.2 数据库</h3><p>数据库（Database，DB）指的是以一定格式存放、能够实现多个用户共享、与应用程序彼此独立的数据集合。</p>
<span id="more"></span>

<h3 id="1-3-数据库管理系统"><a href="#1-3-数据库管理系统" class="headerlink" title="1.3 数据库管理系统"></a>1.3 数据库管理系统</h3><p>数据库管理系统（Database Management System，DBMS）是用来定义和管理数据的软件。如何科学的组织和存储数据，如何高效的获取和维护数据，如何保证数据的安全性和完整性，这些都需要靠数据库管理系统完成。目前，比较流行的数据库管理系统有：Oracle、MySQL、SQL Server、DB2等。</p>
<h3 id="1-4数据库应用程序"><a href="#1-4数据库应用程序" class="headerlink" title="1.4数据库应用程序"></a>1.4数据库应用程序</h3><p>数据库应用程序（Database Application System，DBAS）是在数据库管理系统基础上，使用数据库管理系统的语法，开发的直接面对最终用户的应用程序，如学生管理系统、人事管理系统、图书管理系统等。</p>
<h3 id="1-5-数据库管理员"><a href="#1-5-数据库管理员" class="headerlink" title="1.5 数据库管理员"></a>1.5 数据库管理员</h3><p>数据库管理员（Database Administrator，DBA）是指对数据库管理系统进行操作的人员，其主要负责数据库的运营和维护。</p>
<h3 id="1-6-最终用户"><a href="#1-6-最终用户" class="headerlink" title="1.6 最终用户"></a>1.6 最终用户</h3><p>最终用户（User）指的是数据库应用程序的使用者。用户面向的是数据库应用程序（通过应用程序操作数据），并不会直接与数据库打交道。</p>
<h3 id="1-7-数据库系统"><a href="#1-7-数据库系统" class="headerlink" title="1.7 数据库系统"></a>1.7 数据库系统</h3><p>数据库系统（Database System，DBS）一般是由数据库、数据库管理系统、数据库应用程序、数据库管理员和最终用户构成。其中DBMS是数据库系统的基础和核心</p>
<h2 id="2-数据库表列类型"><a href="#2-数据库表列类型" class="headerlink" title="2. 数据库表列类型"></a>2. 数据库表列类型</h2><h3 id="2-1-整数类型"><a href="#2-1-整数类型" class="headerlink" title="2.1 整数类型"></a>2.1 整数类型</h3><img src="/2021/05/07/MySQL/20210630201735.png" alt="image-20210630201735014" style="zoom:67%;">

<ol>
<li><p>MySQL支持选择在该类型关键字后面的括号内指定整数值的<strong>显示宽度</strong>(例如，INT(4))。显示宽度并不限制可以在列内保存的值的范围，也不限制超过列的指定宽度的值的显示</p>
</li>
<li><p>主键自增：不使用序列，通过<strong>auto_increment</strong>，要求是<strong>整数类型</strong></p>
</li>
<li><p>支持选择在该类型关键字后面的括号内指定整数值的显示宽度</p>
</li>
</ol>
<img src="/2021/05/07/MySQL/20210630201859.png" alt="image-20210630201859642" style="zoom:67%;">







<h1 id="表的完整性约束"><a href="#表的完整性约束" class="headerlink" title="表的完整性约束"></a>表的完整性约束</h1><h2 id="1-非外键约束"><a href="#1-非外键约束" class="headerlink" title="1. 非外键约束"></a>1. 非外键约束</h2><table>
<thead>
<tr>
<th><strong>约束条件</strong></th>
<th><strong>约束描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>PRIMARY KEY</td>
<td>主键约束，约束字段的值可唯一地标识对应的记录</td>
</tr>
<tr>
<td>NOT NULL</td>
<td>非空约束，约束字段的值不能为空</td>
</tr>
<tr>
<td>UNIQUE</td>
<td>唯一约束，约束字段的值是唯一的</td>
</tr>
<tr>
<td>CHECK</td>
<td>检查约束，限制某个字段的取值范围</td>
</tr>
<tr>
<td>DEFAULT</td>
<td>默认值约束，约束字段的默认值</td>
</tr>
<tr>
<td>AUTO_INCREMENT</td>
<td>自动增加约束，约束字段的值自动递增</td>
</tr>
<tr>
<td>FOREIGN KEY</td>
<td>外键约束，约束表与表之间的关系</td>
</tr>
</tbody></table>
<h5 id="实例一：建立一张用来存储学生信息的表"><a href="#实例一：建立一张用来存储学生信息的表" class="headerlink" title="实例一：建立一张用来存储学生信息的表"></a><strong>实例一</strong>：建立一张用来存储学生信息的表</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">建立一张用来存储学生信息的表</span><br><span class="line">字段包含学号、姓名、性别，年龄、入学日期、班级，email等信息</span><br><span class="line">约束：</span><br><span class="line">建立一张用来存储学生信息的表</span><br><span class="line">字段包含学号、姓名、性别，年龄、入学日期、班级，email等信息</span><br><span class="line">【1】学号是主键 = 不能为空 +  唯一 ，主键的作用：可以通过主键查到唯一的一条记录【2】如果主键是整数类型，那么需要自增</span><br><span class="line">【3】姓名不能为空</span><br><span class="line">【4】Email唯一</span><br><span class="line">【5】性别默认值是男</span><br><span class="line">【6】性别只能是男女</span><br><span class="line">【7】年龄只能在18-50之间</span><br><span class="line">*/</span><br><span class="line">-- 创建数据库表：</span><br><span class="line">create table t_student(</span><br><span class="line">        sno int(6) primary key auto_increment, -- 主键自增</span><br><span class="line">        sname varchar(5) not null, </span><br><span class="line">        sex char(1) default &#x27;男&#x27; check(sex=&#x27;男&#x27; || sex=&#x27;女&#x27;),</span><br><span class="line">        age int(3) check(age&gt;=18 and age&lt;=50),</span><br><span class="line">        enterdate date,</span><br><span class="line">        classname varchar(10),</span><br><span class="line">        email varchar(15) unique -- 唯一</span><br><span class="line">);</span><br><span class="line">-- 查看数据：</span><br><span class="line">select * from t_student;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<img src="/2021/05/07/MySQL/20210701085258.png" alt="image-20210701085258650" style="zoom:67%;">

<ul>
<li><p>添加数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 添加数据：</span><br><span class="line">--  1048 - Column &#x27;sname&#x27; cannot be null 不能为null</span><br><span class="line">-- 3819 - Check constraint &#x27;t_student_chk_1&#x27; is violated. 违反检查约束</span><br><span class="line">insert into t_student values (1,&#x27;张三&#x27;,&#x27;男&#x27;,21,&#x27;2023-9-1&#x27;,&#x27;java01班&#x27;,&#x27;zs@126.com&#x27;);</span><br><span class="line">-- 1062 - Duplicate entry &#x27;1&#x27; for key &#x27;t_student.PRIMARY&#x27; 主键重复</span><br><span class="line">-- &gt; 1062 - Duplicate entry &#x27;ls@126.com&#x27; for key &#x27;t_student.email&#x27; 违反唯一约束</span><br><span class="line">insert into t_student values (2,&#x27;李四&#x27;,&#x27;男&#x27;,21,&#x27;2023-9-1&#x27;,&#x27;java01班&#x27;,&#x27;ls@126.com&#x27;);</span><br><span class="line">insert into t_student values (3,&#x27;露露&#x27;,&#x27;男&#x27;,21,&#x27;2023-9-1&#x27;,&#x27;java01班&#x27;,&#x27;ls@126.com&#x27;);</span><br><span class="line">-- 如果主键没有设定值，或者用null.default都可以完成主键自增的效果</span><br><span class="line">insert into t_student (sname,enterdate) values (&#x27;菲菲&#x27;,&#x27;2029-4-5&#x27;);</span><br><span class="line">insert into t_student values (null,&#x27;小明&#x27;,&#x27;男&#x27;,21,&#x27;2023-9-1&#x27;,&#x27;java01班&#x27;,&#x27;xm@126.com&#x27;);</span><br><span class="line">insert into t_student values (default,&#x27;小刚&#x27;,&#x27;男&#x27;,21,&#x27;2023-9-1&#x27;,&#x27;java01班&#x27;,&#x27;xg@126.com&#x27;);</span><br><span class="line">-- 如果sql报错，可能主键就浪费了，后续插入的主键是不连号的，我们主键也不要求连号的</span><br><span class="line">insert into t_student values (null,&#x27;小明&#x27;,&#x27;男&#x27;,21,&#x27;2023-9-1&#x27;,&#x27;java01班&#x27;,&#x27;oo@126.com&#x27;);</span><br></pre></td></tr></table></figure>

<p><strong>常见错误：</strong></p>
<p>  –》 1048 - Column ‘sname’ cannot be null <strong>不能为null</strong></p>
<p>  –》 819 - Check constraint ‘t_student_chk_1’ is violated. <strong>违反检查约束</strong></p>
<p>  – 》1062 - Duplicate（重复的） entry ‘1’ for key ‘t_student.PRIMARY’ <strong>主键重复</strong></p>
<p>  – 》1062 - Duplicate entry ‘<a href="mailto:&#x6c;&#x73;&#x40;&#x31;&#x32;&#54;&#x2e;&#99;&#x6f;&#x6d;">&#x6c;&#x73;&#x40;&#x31;&#x32;&#54;&#x2e;&#99;&#x6f;&#x6d;</a>‘ for key ‘t_student.email’ <strong>违反唯一约束</strong></p>
<ul>
<li>使用自增的时候用<strong>null和default</strong>都是可以</li>
<li>如果sql报错，可能<strong>主键</strong>就浪费了，后续插入的主键是不连号的，主键也不要求连号的</li>
</ul>
</li>
</ul>
<h4 id="列级约束和表级约束"><a href="#列级约束和表级约束" class="headerlink" title="- 列级约束和表级约束"></a>- 列级约束和表级约束</h4><p>(1)   <strong>表级约束</strong>：可以约束表中任意一个或多个字段。与列定义相互独立，不包含在列定义中；与定义用‘，’分隔；必须指出要约束的列的名称；</p>
<p>(2)   <strong>列级约束</strong>：包含在列定义中，直接跟在该列的其它定义之后 ，用空格分隔；不必指定列名；</p>
<h5 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除表：</span><br><span class="line">drop table t_student;</span><br><span class="line">-- 创建数据库表：</span><br><span class="line">create table t_student(</span><br><span class="line">        sno int(6) auto_increment, </span><br><span class="line">        sname varchar(5) not null, </span><br><span class="line">        sex char(1) default &#x27;男&#x27;,</span><br><span class="line">        age int(3),</span><br><span class="line">        enterdate date,</span><br><span class="line">        classname varchar(10),</span><br><span class="line">        email varchar(15),</span><br><span class="line">    -- 表级约束：</span><br><span class="line">        constraint pk_stu primary key (sno),  -- pk_stu 主键约束的名字</span><br><span class="line">        constraint ck_stu_sex check (sex = &#x27;男&#x27; || sex = &#x27;女&#x27;),</span><br><span class="line">        constraint ck_stu_age check (age &gt;= 18 and age &lt;= 50),</span><br><span class="line">        constraint uq_stu_email unique (email)</span><br><span class="line">);</span><br><span class="line">-- 添加数据：</span><br><span class="line">insert into t_student values (1,&#x27;张三&#x27;,&#x27;男&#x27;,21,&#x27;2023-9-1&#x27;,&#x27;java01班&#x27;,&#x27;zs@126.com&#x27;);</span><br><span class="line">-- &gt; 3819 - Check constraint &#x27;ck_stu_sex&#x27; is violated.</span><br><span class="line">-- &gt; 3819 - Check constraint &#x27;ck_stu_age&#x27; is violated.</span><br><span class="line">-- &gt; 1062 - Duplicate entry &#x27;zs@126.com&#x27; for key &#x27;t_student.uq_stu_email&#x27;</span><br><span class="line">insert into t_student values (3,&#x27;李四&#x27;,&#x27;男&#x27;,21,&#x27;2023-9-1&#x27;,&#x27;java01班&#x27;,&#x27;zs@126.com&#x27;);</span><br><span class="line">-- 查看数据：</span><br><span class="line">select * from t_student;</span><br></pre></td></tr></table></figure>

<h4 id="创建表之后添加约束"><a href="#创建表之后添加约束" class="headerlink" title="- 创建表之后添加约束"></a>- 创建表之后添加约束</h4><h5 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除表：</span><br><span class="line">drop table t_student;</span><br><span class="line">-- 创建数据库表：</span><br><span class="line">create table t_student(</span><br><span class="line">        sno int(6), </span><br><span class="line">        sname varchar(5) not null, </span><br><span class="line">        sex char(1) default &#x27;男&#x27;,</span><br><span class="line">        age int(3),</span><br><span class="line">        enterdate date,</span><br><span class="line">        classname varchar(10),</span><br><span class="line">        email varchar(15)</span><br><span class="line">);</span><br><span class="line">-- &gt; 1075 - Incorrect table definition; there can be only one auto column and it must be defined as a key</span><br><span class="line">-- 错误的解决办法：就是auto_increment去掉</span><br><span class="line">-- 在创建表以后添加约束：</span><br><span class="line">alter table t_student add constraint pk_stu primary key (sno) ; -- 主键约束</span><br><span class="line">alter table t_student modify sno int(6) auto_increment; -- 修改自增条件</span><br><span class="line">alter table t_student add constraint ck_stu_sex check (sex = &#x27;男&#x27; || sex = &#x27;女&#x27;);</span><br><span class="line">alter table t_student add constraint ck_stu_age check (age &gt;= 18 and age &lt;= 50);</span><br><span class="line">alter table t_student add constraint uq_stu_email unique (email);</span><br><span class="line">-- 查看表结构：</span><br><span class="line">desc t_student;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>验证约束添加成功：</p>
<img src="/2021/05/07/MySQL/20210701105406.png" alt="image-20210701105405972" style="zoom:67%;">



<h2 id="2-外键约束"><a href="#2-外键约束" class="headerlink" title="2. 外键约束"></a>2. 外键约束</h2><ul>
<li>外键约束（FOREIGN KEY，缩写FK）是用来实现数据库表的参照完整性的。<strong>外键约束可以使两张表紧密的结合起来，特别是针对修改或者删除的级联操作时，会保证数据的完整性。</strong></li>
<li>外键是指表中某个字段的值依赖于另一张表中某个字段的值，而被依赖的字段必须具有主键约束或者唯一约束。被依赖的表我们通常称之为父表或者主表，设置外键约束的表称为子表或者从表。</li>
<li>只有<strong>表级约束</strong>没有列级约束</li>
</ul>
<h5 id="实例四"><a href="#实例四" class="headerlink" title="实例四"></a>实例四</h5><p>主表（父表）：班级表  -  班级编号 - 主键</p>
<p> 从表（子表）：学生表 - 班级编号 - 外键</p>
<ol>
<li><p>创建父表—班级表：</p>
</li>
<li><ul>
<li><p>cno(主键、自增)；cname（不为空）；room；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 先删除表，先删除从表再删除父表</span><br><span class="line">drop table t_student;</span><br><span class="line">drop table t_class;</span><br><span class="line">-- 先创建父表：班级表：</span><br><span class="line">create table t_class(</span><br><span class="line">        cno int(4) primary key auto_increment,</span><br><span class="line">        cname varchar(10) not null,</span><br><span class="line">        room char(4)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>创建从表—学生表：</p>
<ul>
<li><p>sno(主键、自增)；sname（不为空）；classno（取值参考t_class表中的cno字段，不要求字段名字完全重复，但是类型长度定义 尽量要求相同。);</p>
</li>
<li><p><strong>添加外键约束</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 添加学生表，添加外键约束：</span><br><span class="line">create table t_student(</span><br><span class="line">        sno int(6) primary key auto_increment, </span><br><span class="line">        sname varchar(5) not null, </span><br><span class="line">        classno int(4),-- 取值参考t_class表中的cno字段，不要求字段名字完全重复，但是类型长度定义 尽量要求相同。</span><br><span class="line">    -- 外键约束：</span><br><span class="line">        constraint fk_stu_classno foreign key (classno) references t_class (cno)</span><br><span class="line">    </span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p><strong>删除外键约束</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除外键约束</span><br><span class="line">alter table EMP</span><br><span class="line">	drop foreign key FK_DEPTNO</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>添加数据：</p>
</li>
<li><p>可以一次性添加多条记录：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 可以一次性添加多条记录：</span><br><span class="line">insert into t_class values (null,&#x27;java001&#x27;,&#x27;r803&#x27;),(null,&#x27;java002&#x27;,&#x27;r416&#x27;),(null,&#x27;大数据001&#x27;,&#x27;r103&#x27;);</span><br><span class="line">insert into t_student values (null,&#x27;张三&#x27;,1),(null,&#x27;李四&#x27;,1),(null,&#x27;王五&#x27;,2),(null,&#x27;朱六&#x27;,3);</span><br></pre></td></tr></table></figure></li>
<li><p>查询班级表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查看班级表和学生表：</span><br><span class="line">select * from t_class;</span><br><span class="line">select * from t_student;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>添加外键的效果</strong>：</p>
<ul>
<li>删除班级会出错</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 尝试删除班级</span><br><span class="line">delete from t_class where cno = 1;</span><br></pre></td></tr></table></figure>

<img src="/2021/05/07/MySQL/20210701111051.png" alt="image-20210701111051536" style="zoom:67%;"></li>
</ol>
<h4 id="外键策略："><a href="#外键策略：" class="headerlink" title="外键策略："></a><strong>外键策略：</strong></h4><p>直接删除班级会错误，有时候必须删，可以加入外键策略</p>
<h6 id="策略一：no-action-不允许操作"><a href="#策略一：no-action-不允许操作" class="headerlink" title="策略一：no action 不允许操作"></a>策略一：no action 不允许操作</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 策略1：no action 不允许操作</span><br><span class="line">-- 通过操作sql来完成：</span><br><span class="line">-- 先把班级2的学生对应的班级 改为null </span><br><span class="line">update t_student set classno = null where classno = 2;</span><br><span class="line">-- 然后再删除班级2   </span><br><span class="line">delete from t_class where cno = 2;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src="/2021/05/07/MySQL/20210701112307.png" alt="image-20210701112307207" style="zoom:67%;">

<img src="/2021/05/07/MySQL/20210701112344.png" alt="image-20210701112344539" style="zoom: 50%;">

<h6 id="策略二：使用cascade级联操作"><a href="#策略二：使用cascade级联操作" class="headerlink" title="策略二：使用cascade级联操作"></a>策略二：使用cascade级联操作</h6><p>操作主表的时候影响从表的外键</p>
<ul>
<li><p>先删除外键约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 策略2：cascade 级联操作：操作主表的时候影响从表的外键信息：</span><br><span class="line">alter table t_student drop foreign key fk_stu_classno;</span><br></pre></td></tr></table></figure></li>
<li><p>重新添加外键约束（增加一个级联操作）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 重新添加外键约束：</span><br><span class="line">alter table t_student add constraint fk_stu_classno foreign key (classno) references t_class (cno) on update cascade on delete cascade;</span><br></pre></td></tr></table></figure></li>
<li><p>试着更新和删除操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 试试更新：</span><br><span class="line">update t_class set cno = 5 where cno = 3;</span><br><span class="line">-- 试试删除：</span><br><span class="line">delete from t_class where cno = 5;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<img src="/2021/05/07/MySQL/20210701113031.png" alt="image-20210701113031631" style="zoom:50%;"></li>
</ul>
<h6 id="策略三：set-null-置空操作"><a href="#策略三：set-null-置空操作" class="headerlink" title="策略三：set null     置空操作"></a>策略三：set null     置空操作</h6><ul>
<li><p>先删除之前的外键约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 先删除之前的外键约束：</span><br><span class="line">alter table t_student drop foreign key fk_stu_classno;</span><br></pre></td></tr></table></figure></li>
<li><p>重新添加外键约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 重新添加外键约束：</span><br><span class="line">alter table t_student add constraint fk_stu_classno foreign key (classno) references t_class (cno) on update set null on delete set null;</span><br></pre></td></tr></table></figure></li>
<li><p>试着更新操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 更新</span><br><span class="line">update t_class set cno = 5 whwere con = 1;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src="/2021/05/07/MySQL/20210701142452.png" alt="image-20210701142451962" style="zoom:67%;">

<img src="/2021/05/07/MySQL/20210701142510.png" alt="image-20210701142510409" style="zoom: 50%;"></li>
</ul>
<p>注：策略2 级联操作  和  策略2 的  删除操作  可以混着使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table t_student add constraint fk_stu_classno foreign key (classno) references t_class (cno) on update cascade on delete set null ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>应用场合：</p>
<p>– （1）朋友圈删除，点赞。留言都删除  –  级联操作<br>– （2）解散班级，对应的学生 置为班级为null就可以了，– set null</p>
<h1 id="DQL查询操作"><a href="#DQL查询操作" class="headerlink" title="DQL查询操作*"></a>DQL查询操作*</h1><h2 id="1-常见表的准备"><a href="#1-常见表的准备" class="headerlink" title="1. 常见表的准备"></a>1. 常见表的准备</h2><h3 id="部门表-dept"><a href="#部门表-dept" class="headerlink" title="部门表(dept)"></a>部门表(dept)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table DEPT(  </span><br><span class="line">  DEPTNO int(2) not null,  </span><br><span class="line">  DNAME  VARCHAR(14),  </span><br><span class="line">  LOC    VARCHAR(13)  </span><br><span class="line">);  </span><br><span class="line">alter table DEPT </span><br><span class="line">  add constraint PK_DEPT primary key (DEPTNO); </span><br></pre></td></tr></table></figure>

<h3 id="员工表（emp"><a href="#员工表（emp" class="headerlink" title="员工表（emp)"></a>员工表（emp)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table EMP  </span><br><span class="line">(  </span><br><span class="line">  EMPNO    int(4) primary key,  </span><br><span class="line">  ENAME    VARCHAR(10),  </span><br><span class="line">  JOB      VARCHAR(9),  </span><br><span class="line">  MGR      int(4),  </span><br><span class="line">  HIREDATE DATE,  </span><br><span class="line">  SAL      double(7,2),  </span><br><span class="line">  COMM     double(7,2),  </span><br><span class="line">  DEPTNO   int(2)  </span><br><span class="line">);  </span><br><span class="line">alter table EMP  </span><br><span class="line">  add constraint FK_DEPTNO foreign key (DEPTNO)  </span><br><span class="line">  references DEPT (DEPTNO);  </span><br></pre></td></tr></table></figure>

<h3 id="薪资登记表-salgrade"><a href="#薪资登记表-salgrade" class="headerlink" title="薪资登记表(salgrade)"></a>薪资登记表(salgrade)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table SALGRADE  </span><br><span class="line">(  </span><br><span class="line">  GRADE int primary key,  </span><br><span class="line">  LOSAL double(7,2),  </span><br><span class="line">  HISAL double(7,2)  </span><br><span class="line">);  </span><br></pre></td></tr></table></figure>

<h3 id="奖金表-bonus"><a href="#奖金表-bonus" class="headerlink" title="奖金表(bonus)"></a>奖金表(bonus)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table BONUS  </span><br><span class="line">(  </span><br><span class="line">  ENAME VARCHAR(10),  </span><br><span class="line">  JOB   VARCHAR(9),  </span><br><span class="line">  SAL   double(7,2),  </span><br><span class="line">  COMM  double(7,2)  </span><br><span class="line">);  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- DEPT</span><br><span class="line">insert into DEPT (DEPTNO, DNAME, LOC)  </span><br><span class="line">values (10, &#x27;ACCOUNTING&#x27;, &#x27;NEW YORK&#x27;);  </span><br><span class="line">insert into DEPT (DEPTNO, DNAME, LOC)  </span><br><span class="line">values (20, &#x27;RESEARCH&#x27;, &#x27;DALLAS&#x27;);  </span><br><span class="line">insert into DEPT (DEPTNO, DNAME, LOC)  </span><br><span class="line">values (30, &#x27;SALES&#x27;, &#x27;CHICAGO&#x27;);  </span><br><span class="line">insert into DEPT (DEPTNO, DNAME, LOC)  </span><br><span class="line">values (40, &#x27;OPERATIONS&#x27;, &#x27;BOSTON&#x27;);  </span><br><span class="line">-- EMP</span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7369, &#x27;SMITH&#x27;, &#x27;CLERK&#x27;, 7902, &#x27;1980-12-17&#x27;, 800, null, 20);  </span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7499, &#x27;ALLEN&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-02-20&#x27;, 1600, 300, 30);  </span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7521, &#x27;WARD&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-02-22&#x27;, 1250, 500, 30);  </span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7566, &#x27;JONES&#x27;, &#x27;MANAGER&#x27;, 7839, &#x27;1981-04-02&#x27;, 2975, null, 20);  </span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7654, &#x27;MARTIN&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-09-28&#x27;, 1250, 1400, 30);  </span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7698, &#x27;BLAKE&#x27;, &#x27;MANAGER&#x27;, 7839, &#x27;1981-05-01&#x27;, 2850, null, 30);  </span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7782, &#x27;CLARK&#x27;, &#x27;MANAGER&#x27;, 7839, &#x27;1981-06-09&#x27;, 2450, null, 10);  </span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7788, &#x27;SCOTT&#x27;, &#x27;ANALYST&#x27;, 7566, &#x27;1987-04-19&#x27;, 3000, null, 20);  </span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7839, &#x27;KING&#x27;, &#x27;PRESIDENT&#x27;, null, &#x27;1981-11-17&#x27;, 5000, null, 10);  </span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7844, &#x27;TURNER&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-09-08&#x27;, 1500, 0, 30);  </span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7876, &#x27;ADAMS&#x27;, &#x27;CLERK&#x27;, 7788, &#x27;1987-05-23&#x27;, 1100, null, 20);  </span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7900, &#x27;JAMES&#x27;, &#x27;CLERK&#x27;, 7698, &#x27;1981-12-03&#x27;, 950, null, 30);  </span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7902, &#x27;FORD&#x27;, &#x27;ANALYST&#x27;, 7566, &#x27;1981-12-03&#x27;, 3000, null, 20);  </span><br><span class="line">insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)  </span><br><span class="line">values (7934, &#x27;MILLER&#x27;, &#x27;CLERK&#x27;, 7782, &#x27;1982-01-23&#x27;, 1300, null, 10);  </span><br><span class="line">-- SALGRADE</span><br><span class="line">insert into SALGRADE (GRADE, LOSAL, HISAL)  </span><br><span class="line">values (1, 700, 1200);  </span><br><span class="line">insert into SALGRADE (GRADE, LOSAL, HISAL)  </span><br><span class="line">values (2, 1201, 1400);  </span><br><span class="line">insert into SALGRADE (GRADE, LOSAL, HISAL)  </span><br><span class="line">values (3, 1401, 2000);  </span><br><span class="line">insert into SALGRADE (GRADE, LOSAL, HISAL)  </span><br><span class="line">values (4, 2001, 3000);  </span><br><span class="line">insert into SALGRADE (GRADE, LOSAL, HISAL)  </span><br><span class="line">values (5, 3001, 9999);  </span><br><span class="line"></span><br><span class="line">-- 查看表：</span><br><span class="line">select * from dept; </span><br><span class="line">-- 部门表：dept:department 部分 ，loc - location 位置</span><br><span class="line">select * from emp;</span><br><span class="line">-- 员工表：emp:employee 员工   ,mgr :manager上级领导编号，hiredate 入职日期  firedate 解雇日期 ，common：补助</span><br><span class="line">-- deptno 外键 参考  dept - deptno字段</span><br><span class="line">-- mgr 外键  参考  自身表emp - empno  产生了自关联</span><br><span class="line">select * from salgrade;</span><br><span class="line">-- losal - lowsal</span><br><span class="line">-- hisal - highsal</span><br><span class="line">select * from bonus;</span><br></pre></td></tr></table></figure>

<h3 id="结果-表格形式"><a href="#结果-表格形式" class="headerlink" title="结果(表格形式)"></a>结果(表格形式)</h3><img src="/2021/05/07/MySQL/20210701143713.png" alt="image-20210701143713377" style="zoom:67%;">

<img src="/2021/05/07/MySQL/20210701143726.png" alt="image-20210701143726512" style="zoom:67%;">

<img src="/2021/05/07/MySQL/20210701143737.png" alt="image-20210701143737874" style="zoom:67%;">

<img src="/2021/05/07/MySQL/20210701143749.png" alt="image-20210701143749663" style="zoom:67%;">

<h2 id="2-单表查询"><a href="#2-单表查询" class="headerlink" title="2.  单表查询"></a>2.  单表查询</h2><h3 id="2-1-简单的SQL查询"><a href="#2-1-简单的SQL查询" class="headerlink" title="2.1 简单的SQL查询"></a>2.1 简单的SQL查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 对emp表查询：</span><br><span class="line">select * from emp; -- *代表所有数据</span><br><span class="line">-- 显示部分列：</span><br><span class="line">select empno,ename,sal from emp;</span><br><span class="line">-- 显示部分行：where子句</span><br><span class="line">select * from emp where sal &gt; 2000;</span><br><span class="line">-- 显示部分列，部分行：</span><br><span class="line">select empno,ename,job,mgr from emp where sal &gt; 2000;</span><br><span class="line">-- 起别名：</span><br><span class="line">select empno 员工编号,ename 姓名,sal 工资 from emp; -- as 省略，&#x27;&#x27;或者&quot;&quot;省略了</span><br><span class="line">-- as alias 别名</span><br><span class="line">select empno as 员工编号,ename as 姓名,sal as 工资 from emp;</span><br><span class="line">select empno as &#x27;员工编号&#x27;,ename as &quot;姓名&quot;,sal as 工资 from emp;</span><br><span class="line">-- &gt; 1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;编号,ename as &quot;姓 名&quot;,sal as 工资 from emp&#x27; at line 1</span><br><span class="line">-- 错误原因：在别名中有特殊符号的时候，&#x27;&#x27;或者&quot;&quot;不可以省略不写</span><br><span class="line">select empno as 员工 编号,ename as &quot;姓 名&quot;,sal as 工资 from emp;</span><br><span class="line">-- 算术运算符：</span><br><span class="line">select empno,ename,sal,sal+1000 as &#x27;涨薪后&#x27;,deptno from emp where sal &lt; 2500;</span><br><span class="line">select empno,ename,sal,comm,sal+comm from emp;  -- ？？？后面再说</span><br><span class="line">-- 去重操作：</span><br><span class="line">select job from emp;</span><br><span class="line">select distinct job from emp;</span><br><span class="line">select job,deptno from emp;</span><br><span class="line">select distinct job,deptno from emp; -- 对后面的所有列组合 去重 ，而不是单独的某一列去重</span><br><span class="line">-- 排序：</span><br><span class="line">select * from emp order by sal; -- 默认情况下是按照升序排列的</span><br><span class="line">select * from emp order by sal asc; -- asc 升序，可以默认不写</span><br><span class="line">select * from emp order by sal desc; -- desc 降序</span><br><span class="line">select * from emp order by sal asc ,deptno desc; -- 在工资升序的情况下，deptno按照降序排列</span><br></pre></td></tr></table></figure>



<h3 id="2-2-where子句"><a href="#2-2-where子句" class="headerlink" title="2.2 where子句"></a>2.2 where子句</h3><p>将过滤条件放在where子句的后面，可以筛选/过滤出我们想要的符合条件的数据</p>
<ul>
<li><p>加关系运算符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- where 子句 + 关系运算符</span><br><span class="line">select * from emp where deptno = 10;</span><br><span class="line">select * from emp where deptno &gt; 10;</span><br><span class="line">select * from emp where deptno &gt;= 10;</span><br><span class="line">select * from emp where deptno &lt; 10;</span><br><span class="line">select * from emp where deptno &lt;= 10;</span><br><span class="line">select * from emp where deptno &lt;&gt; 10;</span><br><span class="line">select * from emp where deptno != 10;</span><br><span class="line">select * from emp where job = &#x27;CLERK&#x27;; </span><br><span class="line">select * from emp where job = &#x27;clerk&#x27;; -- 默认情况下不区分大小写 </span><br><span class="line">select * from emp where binary job = &#x27;clerk&#x27;; -- binary区分大小写</span><br><span class="line">select * from emp where hiredate &lt; &#x27;1981-12-25&#x27;;</span><br></pre></td></tr></table></figure></li>
<li><p>加逻辑运算符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- where 子句 + 逻辑运算符：and </span><br><span class="line">select * from emp where sal &gt; 1500 and sal &lt; 3000;  -- (1500,3000)</span><br><span class="line">select * from emp where sal &gt; 1500 &amp;&amp; sal &lt; 3000; </span><br><span class="line">select * from emp where sal &gt; 1500 and sal &lt; 3000 order by sal;</span><br><span class="line">select * from emp where sal between 1500 and 3000; -- [1500,3000]</span><br><span class="line">-- where 子句 + 逻辑运算符：or</span><br><span class="line">select * from emp where deptno = 10 or deptno = 20;</span><br><span class="line">select * from emp where deptno = 10 || deptno = 20;</span><br><span class="line">select * from emp where deptno in (10,20);</span><br><span class="line">select * from emp where job in (&#x27;MANAGER&#x27;,&#x27;CLERK&#x27;,&#x27;ANALYST&#x27;);</span><br></pre></td></tr></table></figure></li>
<li><p>加模糊查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- where子句 + 模糊查询：</span><br><span class="line">-- 查询名字中带A的员工  -- %代表任意多个字符 0,1,2，.....</span><br><span class="line">select * from emp where ename like &#x27;%A%&#x27; ;</span><br><span class="line">-- -任意一个字符</span><br><span class="line">select * from emp where ename like &#x27;__A%&#x27; ;</span><br></pre></td></tr></table></figure></li>
<li><p>关于null的判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 关于null的判断：</span><br><span class="line">select * from emp where comm is null;</span><br><span class="line">select * from emp where comm is not null;</span><br></pre></td></tr></table></figure></li>
<li><p>小括号的使用：因为不同运算符的优先级别不同，加括号为了可读性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 小括号的使用  ：因为不同的运算符的优先级别不同，加括号为了可读性</span><br><span class="line">select * from emp where job = &#x27;SALESMAN&#x27; or job = &#x27;CLERK&#x27; and sal &gt;=1500; -- 先and再or  and &gt; or</span><br><span class="line">select * from emp where job = &#x27;SALESMAN&#x27; or (job = &#x27;CLERK&#x27; and sal &gt;=1500); </span><br><span class="line">select * from emp where (job = &#x27;SALESMAN&#x27; or job = &#x27;CLERK&#x27;) and sal &gt;=1500;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-3-函数"><a href="#2-3-函数" class="headerlink" title="2.3 函数"></a>2.3 函数</h3><p><em><strong>除了多行函数（max,min,count,sum,avg），都是单行函数</strong></em></p>
<h4 id="单行函数"><a href="#单行函数" class="headerlink" title="- 单行函数"></a>- 单行函数</h4><h5 id="1-字符串函数"><a href="#1-字符串函数" class="headerlink" title="1. 字符串函数"></a>1. 字符串函数</h5><table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>CONCAT(str1, str2, ···, strn)</td>
<td>将str1、str2···strn拼接成一个新的字符串</td>
</tr>
<tr>
<td>INSERT(str, index, n,  newstr)</td>
<td>将字符串str从第index位置开始的n个字符替换成字符串newstr</td>
</tr>
<tr>
<td>LENGTH(str)</td>
<td>获取字符串str的长度</td>
</tr>
<tr>
<td>LOWER(str)</td>
<td>将字符串str中的每个字符转换为小写</td>
</tr>
<tr>
<td>UPPER(str)</td>
<td>将字符串str中的每个字符转换为大写</td>
</tr>
<tr>
<td>LEFT(str, n)</td>
<td>获取字符串str最左边的n个字符</td>
</tr>
<tr>
<td>RIGHT(str, n)</td>
<td>获取字符串str最右边的n个字符</td>
</tr>
<tr>
<td>LPAD(str, n, pad)</td>
<td>使用字符串pad在str的最左边进行填充，直到长度为n个字符为止</td>
</tr>
<tr>
<td>RPAD(str, n, pad)</td>
<td>使用字符串pad在str的最右边进行填充，直到长度为n个字符为止</td>
</tr>
<tr>
<td>LTRIM(str)</td>
<td>去除字符串str左侧的空格</td>
</tr>
<tr>
<td>RTRIM(str)</td>
<td>去除字符串str右侧的空格</td>
</tr>
<tr>
<td>TRIM(str)</td>
<td>去除字符串str左右两侧的空格</td>
</tr>
<tr>
<td>REPLACE(str,oldstr,newstr)</td>
<td>用字符串newstr替换字符串str中所有的子字符串oldstr</td>
</tr>
<tr>
<td>REVERSE(str)</td>
<td>将字符串str中的字符逆序</td>
</tr>
<tr>
<td>STRCMP(str1,  str2)</td>
<td>比较字符串str1和str2的大小</td>
</tr>
<tr>
<td>SUBSTRING(str,index,n)</td>
<td>获取从字符串str的index位置开始的n个字符</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 1.字符串函数</span><br><span class="line">select ename,length(ename),substring(ename,2,3) from emp;</span><br><span class="line">-- substring字符串截取，2:从字符下标为2开始，3：截取长度3    （下标从1开始）</span><br></pre></td></tr></table></figure>

<p>显示结果：</p>
<img src="/2021/05/07/MySQL/20210630210116.png" alt="image-20210630210115889" style="zoom:50%;">



<h5 id="2-数值函数"><a href="#2-数值函数" class="headerlink" title="2. 数值函数"></a>2. 数值函数</h5><table>
<thead>
<tr>
<th align="left"><strong>函数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">ABS(num)</td>
<td>返回num的绝对值</td>
</tr>
<tr>
<td align="left">CEIL(num)</td>
<td>返回大于num的最小整数（向上取整）</td>
</tr>
<tr>
<td align="left">FLOOR(num)</td>
<td>返回小于num的最大整数（向下取整）</td>
</tr>
<tr>
<td align="left">MOD(num1, num2)</td>
<td>返回num1/num2的余数（取模）</td>
</tr>
<tr>
<td align="left">PI()</td>
<td>返回圆周率的值</td>
</tr>
<tr>
<td align="left">POW(num,n)/POWER(num,  n)</td>
<td>返回num的n次方</td>
</tr>
<tr>
<td align="left">RAND(num)</td>
<td>返回0~1之间的随机数</td>
</tr>
<tr>
<td align="left">ROUND(num, n)</td>
<td>返回x四舍五入后的值，该值保留到小数点后n位</td>
</tr>
<tr>
<td align="left">TRUNCATE(num, n)</td>
<td>返回num被舍去至小数点后n位的值</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 2.数值函数</span><br><span class="line">select abs(-5),ceil(5.3),floor(5.9),round(3.14) from dual; -- dual实际就是一个伪表</span><br><span class="line">select abs(-5) 绝对值,ceil(5.3) 向上取整,floor(5.9) 向下取整,round(3.14) 四舍五入;  </span><br><span class="line">-- 如果没有where条件的话，from dual可以省略不写</span><br><span class="line">select ceil(sal) from emp;</span><br><span class="line">select 10/3,10%3,mod(10,3) ;</span><br></pre></td></tr></table></figure>

<p>显示结果：</p>
<img src="/2021/05/07/MySQL/20210630210456.png" alt="image-20210630210456370" style="zoom:50%;">



<h5 id="3-日期与时间函数"><a href="#3-日期与时间函数" class="headerlink" title="3. 日期与时间函数"></a>3. 日期与时间函数</h5><table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>CURDATE()</td>
<td>返回当前日期</td>
</tr>
<tr>
<td>CURTIME()</td>
<td>返回当前时间</td>
</tr>
<tr>
<td>NOW()</td>
<td>返回当前日期和时间</td>
</tr>
<tr>
<td>SYSDATE()</td>
<td>返回该函数执行时的日期和时间</td>
</tr>
<tr>
<td>DAYOFYEAR(date)</td>
<td>返回日期date为一年中的第几天</td>
</tr>
<tr>
<td>WEEK(date)/WEEKOFYEAR(date)</td>
<td>返回日期date为一年中的第几周</td>
</tr>
<tr>
<td>DATE_FORMAT(date,  format)</td>
<td>返回按字符串format格式化后的日期date</td>
</tr>
<tr>
<td>DATE_ADD(date,  INTERVAL expr unit)    /ADDDATE(date,  INTERVAL expr unit)</td>
<td>返回date加上一个时间间隔后的新时间值</td>
</tr>
<tr>
<td>DATE_SUB(date,  INTERVAL expr unit)    /SUBDATE(date,  INTERVAL expr unit)</td>
<td>返回date减去一个时间间隔后的新时间值</td>
</tr>
<tr>
<td>DATEDIFF(date1,  date2)</td>
<td>返回起始日期date1与结束日期date2之间的间隔天数</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 3.日期与时间函数 </span><br><span class="line">select * from emp;</span><br><span class="line">select curdate(),curtime() ; -- curdate()年月日 curtime()时分秒</span><br><span class="line">select now(),sysdate(),sleep(3),now(),sysdate() from dual; -- now(),sysdate() 年月日时分秒</span><br><span class="line">insert into emp values (9999,&#x27;lili&#x27;,&#x27;SALASMAN&#x27;,7698,now(),1000,null,30);</span><br><span class="line">-- now()可以表示年月日时分秒，但是插入数据的时候还是要参照表的结构的</span><br><span class="line">desc emp;</span><br></pre></td></tr></table></figure>



<img src="/2021/05/07/MySQL/20210630223758.png" alt="image-20210630223758495" style="zoom:50%;">

<img src="/2021/05/07/MySQL/20210630223819.png" alt="image-20210630223819827" style="zoom:50%;">

<img src="/2021/05/07/MySQL/20210630223829.png" alt="image-20210630223829883" style="zoom:50%;">

<h5 id="4-流程函数"><a href="#4-流程函数" class="headerlink" title="4. 流程函数"></a>4. 流程函数</h5><img src="/2021/05/07/MySQL/20210630224323.png" alt="image-20210630224323874" style="zoom:67%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 4.流程函数</span><br><span class="line">-- if相关</span><br><span class="line">select empno,ename,sal,if(sal&gt;=2500,&#x27;高薪&#x27;,&#x27;底薪&#x27;) as &#x27;薪资等级&#x27; from emp; -- if-else 双分支结构</span><br><span class="line">select empno,ename,sal,comm,sal+ifnull(comm,0) from emp; -- 如果comm是null，那么取值为0 -- 单分支</span><br><span class="line">select nullif(1,1),nullif(1,2) from dual; --  如果value1等于value2，则返回null，否则返回value1  </span><br><span class="line">-- case相关：</span><br><span class="line">-- case等值判断</span><br><span class="line">select empno,ename,job,</span><br><span class="line">case job </span><br><span class="line"> when &#x27;CLERK&#x27; then &#x27;店员&#x27;</span><br><span class="line"> when &#x27;SALESMAN&#x27;  then &#x27;销售&#x27;</span><br><span class="line"> when &#x27;MANAGER&#x27; then &#x27;经理&#x27;</span><br><span class="line"> else &#x27;其他&#x27;</span><br><span class="line">end &#x27;岗位&#x27;,</span><br><span class="line">sal from emp;</span><br><span class="line">-- case区间判断:</span><br><span class="line">select empno,ename,sal,</span><br><span class="line">case </span><br><span class="line"> when sal&lt;=1000 then &#x27;A&#x27;</span><br><span class="line"> when sal&lt;=2000 then &#x27;B&#x27;</span><br><span class="line"> when sal&lt;=3000 then &#x27;C&#x27;</span><br><span class="line"> else &#x27;D&#x27;</span><br><span class="line">end &#x27;工资等级&#x27;,</span><br><span class="line">deptno from emp;</span><br><span class="line">from emp;</span><br></pre></td></tr></table></figure>



<h5 id="5-JSON函数"><a href="#5-JSON函数" class="headerlink" title="5. JSON函数"></a>5. JSON函数</h5><img src="/2021/05/07/MySQL/20210630224430.png" alt="image-20210630224430595" style="zoom:67%;">



<h5 id="6-其他函数"><a href="#6-其他函数" class="headerlink" title="6. 其他函数"></a>6. 其他函数</h5><img src="/2021/05/07/MySQL/20210630224453.png" alt="image-20210630224453894" style="zoom:67%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> -- 6.其他函数</span><br><span class="line">select database(),user(),version() from dual;</span><br></pre></td></tr></table></figure>



<h4 id="多行函数"><a href="#多行函数" class="headerlink" title="- 多行函数"></a>- 多行函数</h4><p>对一组数据进行运算，针对一组数据（多行记录）只返回一个结果，也称<strong>分组函数</strong></p>
<img src="/2021/05/07/MySQL/20210630224611.png" alt="image-20210630224611608" style="zoom: 67%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 多行函数：</span><br><span class="line">select max(sal),min(sal),count(sal),sum(sal),sum(sal)/count(sal),avg(sal) from emp;</span><br><span class="line">select * from emp;</span><br><span class="line">-- 多行函数自动忽略null值</span><br><span class="line">select max(comm),min(comm),count(comm),sum(comm),sum(comm)/count(comm),avg(comm) from emp;</span><br><span class="line">-- max(),min(),count()针对所有类型   sum(),avg() 只针对数值型类型有效</span><br><span class="line">select max(ename),min(ename),count(ename),sum(ename),avg(ename) from emp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- count --计数   </span><br><span class="line">-- 统计表的记录数：方式1：</span><br><span class="line">select * from emp;</span><br><span class="line">select count(ename) from emp;</span><br><span class="line">select count(*) from emp;</span><br><span class="line">-- 统计表的记录数：方式2</span><br><span class="line">select 1 from dual;</span><br><span class="line">select 1 from emp;</span><br><span class="line">select count(1) from emp;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-分组与筛选"><a href="#2-4-分组与筛选" class="headerlink" title="2.4 分组与筛选"></a>2.4 分组与筛选</h3><h4 id="group-by-分组"><a href="#group-by-分组" class="headerlink" title="group by 分组"></a>group by 分组</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp;</span><br><span class="line">-- 统计各个部门的平均工资 </span><br><span class="line">select deptno,avg(sal) from emp; -- 字段和多行函数不可以同时使用</span><br><span class="line">select deptno,avg(sal) from emp group by deptno; -- 字段和多行函数不可以同时使用,除非这个字段属于分组</span><br><span class="line">select deptno,avg(sal) from emp group by deptno order by deptno desc;</span><br><span class="line">-- 统计各个岗位的平均工资 统计各个岗位的</span><br><span class="line">select job,avg(sal) from emp group by job;</span><br><span class="line">select job,lower(job),avg(sal) from emp group by job;</span><br></pre></td></tr></table></figure>

<h4 id="having-分组后筛选"><a href="#having-分组后筛选" class="headerlink" title="having 分组后筛选"></a>having 分组后筛选</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 统计各个部门的平均工资 ,只显示平均工资2000以上的  - 分组以后进行二次筛选 having</span><br><span class="line">select deptno,avg(sal) from emp group by deptno having avg(sal) &gt; 2000;</span><br><span class="line">select deptno,avg(sal) 平均工资 from emp group by deptno having 平均工资 &gt; 2000;</span><br><span class="line">select deptno,avg(sal) 平均工资 from emp group by deptno having 平均工资 &gt; 2000 order by deptno desc;</span><br></pre></td></tr></table></figure>

<p>where在分组前进行过滤的，having在分组后进行后滤。</p>
<p>对比实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 对比实例：统计各个岗位的平均工资,除了MANAGER</span><br><span class="line">-- 方法1：</span><br><span class="line">select job,avg(sal) from emp where job != &#x27;MANAGER&#x27; group by job;</span><br><span class="line">-- 方法2：</span><br><span class="line">select job,avg(sal) from emp group by job having job != &#x27;MANAGER&#x27; ;</span><br><span class="line">-- where在分组前进行过滤的，having在分组后进行后滤。</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="1-select语句总结"><a href="#1-select语句总结" class="headerlink" title="[1] select语句总结"></a>[1] select语句总结</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select column, group_function(column) </span><br><span class="line">from table </span><br><span class="line">[where condition] </span><br><span class="line">[group by  group_by_expression] </span><br><span class="line">[having group_condition] </span><br><span class="line">[order by column]; </span><br></pre></td></tr></table></figure>

<p>注意：顺序固定，不可以改变顺序</p>
<h4 id="2-select语句的执行顺序"><a href="#2-select语句的执行顺序" class="headerlink" title="[2] select语句的执行顺序"></a>[2] select语句的执行顺序</h4><p>from — where — group  by —  select — having — order  by</p>
<h4 id="3-单表查询练习"><a href="#3-单表查询练习" class="headerlink" title="[3] 单表查询练习"></a>[3] 单表查询练习</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 单表查询练习：</span><br><span class="line">-- 列出工资最小值小于2000的职位</span><br><span class="line">select job,min(sal)</span><br><span class="line">from emp</span><br><span class="line">group by job</span><br><span class="line">having min(sal) &lt; 2000;</span><br><span class="line">-- 列出平均工资大于1200元的部门和工作搭配组合</span><br><span class="line">select deptno,job,avg(sal)</span><br><span class="line">from emp</span><br><span class="line">group by deptno,job</span><br><span class="line">having avg(sal) &gt; 1200</span><br><span class="line">order by avg(sal);</span><br><span class="line">-- 统计[人数小于4的]部门的平均工资。 </span><br><span class="line">select deptno,count(ename),avg(sal) -- 这里可用 count(1)</span><br><span class="line">from emp</span><br><span class="line">group by deptno</span><br><span class="line">having count(ename) &lt; 4;</span><br><span class="line"></span><br><span class="line">-- 统计各部门的最高工资，排除最高工资小于3000的部门。</span><br><span class="line">select deptno,max(sal)</span><br><span class="line">from emp</span><br><span class="line">group by deptno</span><br><span class="line">having max(sal) &gt;= 3000;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="3-多表查询"><a href="#3-多表查询" class="headerlink" title="3.  多表查询"></a>3.  多表查询</h2><h3 id="3-1-交叉连接-cross-join"><a href="#3-1-交叉连接-cross-join" class="headerlink" title="3.1  交叉连接 cross join"></a>3.1  交叉连接 cross join</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select *</span><br><span class="line">from emp</span><br><span class="line">cross join dept;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-自然连接-natural"><a href="#3-2-自然连接-natural" class="headerlink" title="3.2  自然连接 natural"></a>3.2  自然连接 natural</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * </span><br><span class="line">from emp</span><br><span class="line">natural join dept;</span><br></pre></td></tr></table></figure>

<p>优点：自动匹配所有的同名列 ，同名列只显示一次，简单</p>
<p>缺点：查询字段的时候，没有指定字段对应的数据库表，效率低</p>
<p><strong>解决——指定表名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select emp.empno,emp.enaem,emp.sal,dept.dname,dept.loc,dept.deptno</span><br><span class="line">from emp</span><br><span class="line">natural join dept;</span><br></pre></td></tr></table></figure>

<p>缺点：表名太长 </p>
<p><strong>解决——起表名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e.empno,e.ename,e.sal,d.dname,d.loc,d.deptno</span><br><span class="line">from emp e</span><br><span class="line">natural join dept d;</span><br></pre></td></tr></table></figure>

<p>缺点：会自动匹配所有表中同名的字段。有时候我们只需要部分相同的字段</p>
<h3 id="3-3-内连接-inner-join"><a href="#3-3-内连接-inner-join" class="headerlink" title="3.3 内连接 inner join"></a>3.3 内连接 inner join</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * </span><br><span class="line">from emp e</span><br><span class="line">inner join dept d </span><br><span class="line">using(deptno); -- 同名字段才有效</span><br></pre></td></tr></table></figure>

<p>缺点：连接的表字段不同时using无法使用。</p>
<p>解决——<strong>使用on子句</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select *</span><br><span class="line">from emp e</span><br><span class="line">inner join dept d -- 使用on的时候inner可以省略</span><br><span class="line">on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure>





<h3 id="3-4-外连接-outer-join"><a href="#3-4-外连接-outer-join" class="headerlink" title="3.4 外连接  outer  join"></a>3.4 外连接  outer  join</h3><ul>
<li>内连接只显示匹配的数据，例如一个部门没有员工就不会显示</li>
<li><strong>外连接可以显示不匹配的数据</strong></li>
<li>outer都可以省略的</li>
</ul>
<h5 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h5><p>左边的那个表的信息，即使不匹配也可以查看出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * </span><br><span class="line">from emp</span><br><span class="line">left outer join dept d</span><br><span class="line">on e.deptno = d.deptno</span><br></pre></td></tr></table></figure>

<p>结果</p>
<img src="/2021/05/07/MySQL/20210701170246.png" alt="image-20210701170246009" style="zoom:67%;">

<h5 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h5><p>右边的那个表的信息，即使不匹配也可以查看出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select *</span><br><span class="line">from emp e</span><br><span class="line">right outer join dept d</span><br><span class="line">on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<img src="/2021/05/07/MySQL/20210701163643.png" alt="image-20210701163643122" style="zoom:67%;">

<h5 id="全外连接"><a href="#全外连接" class="headerlink" title="全外连接"></a>全外连接</h5><p>这个语法在mysql里面不支持，oracle才支持</p>
<p>为了代替 可以取左外连接和右外连接的并集</p>
<h6 id="并集-union"><a href="#并集-union" class="headerlink" title="并集 union"></a>并集 union</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * </span><br><span class="line">from emp</span><br><span class="line">left outer join dept d</span><br><span class="line">on e.deptno = d.deptno</span><br><span class="line">union -- 并集，不去重，效率低</span><br><span class="line">select *</span><br><span class="line">from emp e</span><br><span class="line">right outer join dept d</span><br><span class="line">on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<img src="/2021/05/07/MySQL/20210701170831.png" alt="image-20210701170831388" style="zoom:67%;">

<h6 id="union-all"><a href="#union-all" class="headerlink" title="union all"></a>union all</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * </span><br><span class="line">from emp</span><br><span class="line">left outer join dept d</span><br><span class="line">on e.deptno = d.deptno</span><br><span class="line">union  all -- 不去重的并集， 效率高</span><br><span class="line">select *</span><br><span class="line">from emp e</span><br><span class="line">right outer join dept d</span><br><span class="line">on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<img src="/2021/05/07/MySQL/20210701171121.png" alt="image-20210701171121236" style="zoom:67%;">



<h3 id="3-5-三表查询"><a href="#3-5-三表查询" class="headerlink" title="3.5 三表查询"></a>3.5 三表查询</h3><p>案例：查询员工的编号、姓名、薪水、部门编号、部门名称、薪水等级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp;</span><br><span class="line">select * from dept;</span><br><span class="line">select * from salgrade；</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from emp e</span><br><span class="line">right outer join dept d</span><br><span class="line">on e.deptno = d.deptno;</span><br><span class="line">-- 可以看做就是上面的结果是一张表，然后再和第三张表进行连接</span><br><span class="line">inner join salgrade s</span><br><span class="line">on e.sal between salgrade</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果</p>
<img src="/2021/05/07/MySQL/20210701184545.png" alt="image-20210701184545238" style="zoom:67%;">



<h3 id="3-6-自连接查询"><a href="#3-6-自连接查询" class="headerlink" title="3.6 自连接查询"></a>3.6 自连接查询</h3><p>相当于把本身表复制一份，本质与前面的连接没有区别</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工的编号、姓名、上级编号,上级的姓名</span><br><span class="line">select * from emp;</span><br><span class="line">select e1.empno 员工编号,e1.ename 员工姓名,e1.mgr 领导编号,e2.ename 员工领导姓名</span><br><span class="line">from emp e1</span><br><span class="line">inner join emp e2</span><br><span class="line">on e1.mgr = e2.empno;</span><br><span class="line">-- 左外连接：</span><br><span class="line">select e1.empno 员工编号,e1.ename 员工姓名,e1.mgr 领导编号,e2.ename 员工领导姓名</span><br><span class="line">from emp e1</span><br><span class="line">left outer join emp e2</span><br><span class="line">on e1.mgr = e2.empno;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<img src="/2021/05/07/MySQL/20210702094750.png" alt="image-20210702094750390" style="zoom:67%;">

<h3 id="补充：92语法的多表查询"><a href="#补充：92语法的多表查询" class="headerlink" title="补充：92语法的多表查询"></a>补充：92语法的多表查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工的编号，员工姓名，薪水，员工部门编号，部门名称：</span><br><span class="line">select e.empno,e.ename,e.sal,e.deptno,d.dname</span><br><span class="line">from emp e,dept d</span><br><span class="line">-- 相当于99语法中的cross join ,出现笛卡尔积，没有意义</span><br><span class="line">select e.empno,e.ename,e.sal,e.deptno,d.dname</span><br><span class="line">from emp e,dept d</span><br><span class="line">where e.deptno = d.deptno;</span><br><span class="line">-- 相当于99语法中的natural join </span><br><span class="line">-- 查询员工的编号，员工姓名，薪水，员工部门编号，部门名称，查询出工资大于2000的员工</span><br><span class="line">select e.empno,e.ename,e.sal,e.deptno,d.dname</span><br><span class="line">from emp e,dept d</span><br><span class="line">where e.deptno = d.deptno and e.sal &gt; 2000;</span><br><span class="line">-- 查询员工的名字，岗位，上级编号，上级名称（自连接）：</span><br><span class="line">select e1.ename,e1.job,e1.mgr ,e2.ename </span><br><span class="line">from emp e1,emp e2</span><br><span class="line">where e1.mgr = e2.empno;</span><br><span class="line">-- 查询员工的编号、姓名、薪水、部门编号、部门名称、薪水等级</span><br><span class="line">select e.empno,e.ename,e.sal,e.deptno,d.dname,s.grade </span><br><span class="line">from emp e,dept d,salgrade s</span><br><span class="line">where e.deptno = d.deptno and e.sal &gt;= s.losal and e.sal &lt;= s.hisal;</span><br><span class="line">-- 总结：</span><br><span class="line">-- 1.92语法麻烦 </span><br><span class="line">-- 2.92语法中 表的连接条件 和  筛选条件  是放在一起的没有分开</span><br><span class="line">-- 3.99语法中提供了更多的查询连接类型：cross,natural,inner,outer </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="4-不相关子查询"><a href="#4-不相关子查询" class="headerlink" title="4. 不相关子查询"></a>4. 不相关子查询</h2><h3 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h3><p>要查询所有比“CLARK”工资高的员工的信息</p>
<p>需要两个命令而且第二个命令依托于第一个命令，会相互影响</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 命令一：查询clark的工资</span><br><span class="line">select sal from emp where ename = clark; -- 2450</span><br><span class="line">-- 命令二：查询所有比其工资高的员工信息</span><br><span class="line">select * from emp where sal &gt; 2450;</span><br></pre></td></tr></table></figure>

<p>子查询可以通过一个命令解决问题 !</p>
<h3 id="4-1-单行子查询"><a href="#4-1-单行子查询" class="headerlink" title="4.1  单行子查询"></a>4.1  单行子查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 将上面两个命令合并</span><br><span class="line">-- 查询工资高于平均工资的雇员的名字和工资</span><br><span class="line">select ename,sal</span><br><span class="line">from emp</span><br><span class="line">where sal &gt; (select sal from emp where sal &gt; avg(sal));</span><br><span class="line"> </span><br><span class="line">-- 查询和CLARK同一部门且比他工资低的雇员的名字和工资</span><br><span class="line">select ename,sal</span><br><span class="line">from emp</span><br><span class="line">where deptno = (select deptno from emp where ename=&#x27;CLARK&#x27;) </span><br><span class="line">	  and </span><br><span class="line">	  sal &lt; (select sal from emp where ename=&#x27;CLARK&#x27; );</span><br><span class="line"></span><br><span class="line">-- 查询职务和SCOTT相同，比SCOTT雇佣时间早的雇员信息</span><br><span class="line">select * </span><br><span class="line">from emp</span><br><span class="line">where job = (select job from emp where ename=&#x27;SCOTT&#x27;)</span><br><span class="line">	  and</span><br><span class="line">	  hiredate &lt; (select hiredate from emp where ename=&#x27;SCOTT&#x27;);</span><br><span class="line">	  </span><br></pre></td></tr></table></figure>

<h3 id="4-2-多行子查询"><a href="#4-2-多行子查询" class="headerlink" title="4.2  多行子查询"></a>4.2  多行子查询</h3><p>子查询查出来的记录为多条：</p>
<h5 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h5><ul>
<li>查询部门20中职务同部门10的雇员一样的雇员信息。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询雇员信息</span><br><span class="line">select * from emp;</span><br><span class="line">-- 查询部门20中的雇员信息</span><br><span class="line">select * from emp where deptno = 20;-- CLERK,MANAGER,ANALYST</span><br><span class="line">-- 部门10的雇员的职务：</span><br><span class="line">select job from emp where deptno = 10; -- MANAGER,PRESIDENT,CLERK</span><br></pre></td></tr></table></figure>

<p>如果使用单行子查询，就会报错  -&gt;Subquery returns more than 1 row</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp </span><br><span class="line">where deptno = 20 </span><br><span class="line">and job in (select job from emp where deptno = 10)</span><br><span class="line">-- &gt; Subquery returns more than 1 row</span><br></pre></td></tr></table></figure>

<p>多行子查询可以解决</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp </span><br><span class="line">where deptno = 20 </span><br><span class="line">and job = any(select job from emp where deptno = 10) -- any</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="实例二-1"><a href="#实例二-1" class="headerlink" title="实例二"></a>实例二</h5><ul>
<li><p>查询工资比所有的“SALESMAN”都高的雇员的编号、名字和工资</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询雇员的编号、名字和工资</span><br><span class="line">select empno,ename,sal from emp</span><br><span class="line">-- “SALESMAN”的工资：</span><br><span class="line">select sal from emp where job = &#x27;SALESMAN&#x27;</span><br><span class="line">-- 查询工资比所有的“SALESMAN”都高的雇员的编号、名字和工资。</span><br><span class="line">-- 多行子查询：</span><br><span class="line">select empno,ename,sal </span><br><span class="line">from emp </span><br><span class="line">where sal &gt; all(select sal from emp where job = &#x27;SALESMAN&#x27;);</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 单行子查询：</span><br><span class="line">select empno,ename,sal </span><br><span class="line">from emp </span><br><span class="line">where sal &gt; (select max(sal) from emp where job = &#x27;SALESMAN&#x27;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="实例三-1"><a href="#实例三-1" class="headerlink" title="实例三"></a>实例三</h5><ul>
<li>查询工资低于任意一个“CLERK”的工资的雇员信息。  </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询雇员信息</span><br><span class="line">select * from emp;</span><br><span class="line">-- 查询工资低于任意一个“CLERK”的工资的雇员信息</span><br><span class="line">select * </span><br><span class="line">from emp</span><br><span class="line">where sal &lt; any(select sal from emp where job = &#x27;CLERK&#x27;)</span><br><span class="line">and job != &#x27;CLERK&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 单行子查询：</span><br><span class="line">select * </span><br><span class="line">from emp</span><br><span class="line">where sal &lt; (select max(sal) from emp where job = &#x27;CLERK&#x27;)</span><br><span class="line">and job != &#x27;CLERK&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="5-相关子查询"><a href="#5-相关子查询" class="headerlink" title="5. 相关子查询"></a>5. 相关子查询</h2><h3 id="引入-2"><a href="#引入-2" class="headerlink" title="引入"></a>引入</h3><ul>
<li><p>不相关的子查询引入：<br>不相关的子查询：子查询可以独立运行，先运行子查询，再运行外查询。<br>相关子查询：子查询不可以独立运行，并且先运行外查询，再运行子查询</p>
</li>
<li><p>不相关的子查询优缺点：<br>好处：简单   功能强大（一些使用不相关子查询不能实现或者实现繁琐的子查询，可以使用相关子查询实现）<br>缺点：稍难理解</p>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ol>
<li><p>查询各个部门最高工资的员工</p>
<ul>
<li>不相关子查询</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where deptno = 10 and sal = (select max(sal) from emp where deptnp = 10)</span><br><span class="line">union</span><br><span class="line">select * from emp where deptno = 20 and sal = (select max(sal) from emp where deptno = 20)</span><br><span class="line">union</span><br><span class="line">select * from emp where deptno = 30 and sal = (select max(sal) from emp where deptno = 30);</span><br></pre></td></tr></table></figure>

<p>太复杂了:unamused:</p>
<ul>
<li>相关子查询</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp e where sal = (select max(sal) from emp where deptno = e.deptno)</span><br></pre></td></tr></table></figure>

<p>简单多啦:happy:</p>
</li>
<li><p>查询工高于所在岗位的平均工资的那些员工</p>
<ul>
<li>不相关子查询</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where job = &#x27;&#x27; and sal &gt;= (select avg(sal) from emp where job = &#x27;&#x27;)</span><br><span class="line">union ....</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>相关子查询</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp e where sal &gt;= (select avg(sal) from emp where job = e.job);</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="数据库对象"><a href="#数据库对象" class="headerlink" title="数据库对象"></a>数据库对象</h1><h2 id="1-事务"><a href="#1-事务" class="headerlink" title="1. 事务"></a>1. 事务</h2><p><strong>事务（Transaction）</strong>是用来维护数据库完整性的，它能够保证一系列的MySQL操作要么全部执行，要么全不执行。</p>
<p>eg1.<br>转账操作：A账户要转账给B账户，那么A账户上减少的钱数和B账户上增加的钱数必须一致，也就是说A账户的转出操作和B账户的转入操作要么全部执行，要么全不执行；如果其中一个操作出现异常而没有执行的话，就会导致账户A和账户B的转入转出金额不一致的情况，为而事实上这种情况是不允许发生的，所以为了防止这种情况的发生，需要使用事务处理。<br>eg2.<br>在淘宝购物下订单的时候，商家库存要减少，订单增加记录，付款我的账号少100元…操作要么全部执行，要么全不执行</p>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>事务（Transaction）指的是一个操作序列，该操作序列中的多个操作要么都做，要么都不做，是一个不可分割的工作单位，是数据库环境中的逻辑工作单位，由DBMS（数据库管理系统）中的事务管理子系统负责事务的处理。<br>目前常用的存储引擎有InnoDB（MySQL5.5以后默认的存储引擎）和MyISAM（MySQL5.5之前默认的存储引擎），其中InnoDB支持事务处理机制，而MyISAM不支持。</p>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><img src="/2021/05/07/MySQL/20210703110321.png" alt="image-20210703110320474" style="zoom: 50%;">

<p>事务处理可以确保除非事务性序列内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的序列，可以简化错误恢复并使应用程序更加可靠。<br>但并不是所有的操作序列都可以称为事务，这是因为一个操作序列要成为事务，必须满足事务的原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）。这四个特性简称为<strong>ACID特性。</strong></p>
<ol>
<li><strong>原子性</strong><pre><code>原子是自然界最小的颗粒，具有不可再分的特性。事务中的所有操作可以看做一个原子，事务是应用中不可再分的最小的逻辑执行体。
使用事务对数据进行修改的操作序列，要么全部执行，要么全不执行。通常，某个事务中的操作都具有共同的目标，并且是相互依赖的。如果数据库系统只执行这些操作中的一部分，则可能会破坏事务的总体目标，而原子性消除了系统只处理部分操作的可能性。
</code></pre>
</li>
<li><strong>一致性</strong><br>一致性是指事务执行的结果必须使数据库从一个一致性状态，变到另一个一致性状态。当数据库中只包含事务成功提交的结果时，数据库处于一致性状态。一致性是通过原子性来保证的。<br>例如：在转账时，只有保证转出和转入的金额一致才能构成事务。也就是说事务发生前和发生后，数据的总额依然匹配。</li>
<li><strong>隔离性</strong><br>隔离性是指各个事务的执行互不干扰，任意一个事务的内部操作对其他并发的事务，都是隔离的。也就是说：并发执行的事务之间既不能看到对方的中间状态，也不能相互影响。<br>例如：在转账时，只有当A账户中的转出和B账户中转入操作都执行成功后才能看到A账户中的金额减少以及B账户中的金额增多。并且其他的事务对于转账操作的事务是不能产生任何影响的。</li>
<li><strong>持久性</strong><br>持久性指事务一旦提交，对数据所做的任何改变，都要记录到永久存储器中，通常是保存进物理数据库，即使数据库出现故障，提交的数据也应该能够恢复。但如果是由于外部原因导致的数据库故障，如硬盘被损坏，那么之前提交的数据则有可能会丢失。</li>
</ol>
<h5 id="实例：使用事务保证转账安全"><a href="#实例：使用事务保证转账安全" class="headerlink" title="实例：使用事务保证转账安全"></a>实例：使用事务保证转账安全</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建账户表：id\uname\balance</span><br><span class="line">create table account(</span><br><span class="line">        id int primary key auto_increment,</span><br><span class="line">        uname varchar(10) not null,</span><br><span class="line">        balance double</span><br><span class="line">);</span><br><span class="line">-- 查看账户表：</span><br><span class="line">select * from account;</span><br><span class="line">-- 在表中插入数据：</span><br><span class="line">insert into account values (null,&#x27;丽丽&#x27;,2000),(null,&#x27;小刚&#x27;,2000);</span><br><span class="line">-- 丽丽给小刚 转200元：</span><br><span class="line">update account set balance = balance - 200 where id = 1;</span><br><span class="line">update account set balance = balance + 200 where id = 2;</span><br><span class="line">-- 默认一个DML语句是一个事务，所以上面的操作执行了2个事务。</span><br><span class="line">update account set balance = balance - 200 where id = 1;</span><br><span class="line">update account set balance = balance2 + 200 where id = 2;</span><br></pre></td></tr></table></figure>

<p><strong>必须让上面的两个操作控制在一个事务中</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 手动开启事务：</span><br><span class="line">start transaction;</span><br><span class="line">-- 操作：</span><br><span class="line">update account set balance = balance - 200 where id = 1;</span><br><span class="line">update account set balance = balance + 200 where id = 2;</span><br><span class="line">-- 手动回滚：刚才执行的操作全部取消：</span><br><span class="line">rollback;</span><br><span class="line">-- 手动提交：</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>

<p>在<strong>回滚和提交</strong>之前，数据库中的数据都是操作的缓存中的数据，而不是数据库的真实数据</p>
<h3 id="事务并发问题"><a href="#事务并发问题" class="headerlink" title="事务并发问题"></a>事务并发问题</h3><h5 id="脏读（Dirty-read）"><a href="#脏读（Dirty-read）" class="headerlink" title="脏读（Dirty read）"></a>脏读（Dirty read）</h5><p>当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p>
<img src="/2021/05/07/MySQL/20210703111005.png" alt="image-20210703111005503" style="zoom:67%;">

<h5 id="不可重复读-（Unrepeatableread）"><a href="#不可重复读-（Unrepeatableread）" class="headerlink" title="不可重复读 （Unrepeatableread）"></a>不可重复读 （Unrepeatableread）</h5><p>指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p>
<img src="/2021/05/07/MySQL/20210703111018.png" alt="image-20210703111018492" style="zoom:67%;">

<h5 id="幻读-（Phantom-read）"><a href="#幻读-（Phantom-read）" class="headerlink" title="幻读 （Phantom read）"></a>幻读 （Phantom read）</h5><p>幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>
 <img src="/2021/05/07/MySQL/20210703111036.png" alt="image-20210703111036154" style="zoom:67%;">

<p><strong>不可重复度和幻读区别：</strong> </p>
<p>不可重复读的重点是修改，幻读的重点在于新增或者删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表 。</p>
<p>例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为 1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导 致A再读自己的工资时工资变为 2000；这就是不可重复读。</p>
<p>例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读 </p>
<h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>​    事务的隔离级别用于决定如何控制并发用户读写数据的操作。数据库是允许多用户并发访问的，如果多个用户同时开启事务并对同一数据进行读写操作的话，有可能会出现脏读、不可重复读和幻读问题，所以MySQL中提供了四种隔离级别来解决上述问题。</p>
<p>​    从低到高依次为<strong>READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ以及SERIALIZABLE</strong>，隔离级别越低，越能支持高并发的数据库操作。      </p>
<img src="/2021/05/07/MySQL/20210703142738.png" alt="image-20210703142738514" style="zoom:67%;">                        

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查看默认的事务隔离级别  MySQL默认的是repeatable read  </span><br><span class="line">select @@transaction_isolation;  </span><br><span class="line">-- 设置事务的隔离级别   （设置当前会话的隔离级别）</span><br><span class="line">set session transaction isolation level read uncommitted;  </span><br><span class="line">set session transaction isolation level read committed;  </span><br><span class="line">set session transaction isolation level repeatable read;  -- 默认的</span><br><span class="line">set session transaction isolation level serializable;  </span><br><span class="line">start transaction ;</span><br><span class="line">select * from account where id = 1;</span><br></pre></td></tr></table></figure>

<h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p>（必须是两个事务都开始以后执行的操作才会影响）</p>
<ul>
<li><p>在read uncommitted的情况下，开始两个事务：</p>
<ul>
<li>事务一</li>
</ul>
<img src="/2021/05/07/MySQL/20210703152258.png" alt="image-20210703145526739" style="zoom:67%;">

<ul>
<li>事务二</li>
</ul>
<img src="/2021/05/07/MySQL/05/07/MySQL/20210703152314.png" class title="image-20210703145443742"></li>
<li><p>事务一查询操作：</p>
<img src="/2021/05/07/MySQL/20210703152514.png" alt="image-20210703152514123" style="zoom:67%;"></li>
<li><p>事务二更新操作，且没提交</p>
<img src="/2021/05/07/MySQL/20210703152552.png" alt="image-20210703152552191" style="zoom:67%;"></li>
<li><p>事务一再次查询：</p>
<img src="/2021/05/07/MySQL/20210703152939.png" alt="image-20210703152939898" style="zoom:67%;">

<p>读到了在脏数据</p>
</li>
<li><p>如果设置为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set session transaction isolation level read committed;</span><br></pre></td></tr></table></figure>

<p>事务二就不会读到脏数据。</p>
</li>
</ul>
<h2 id="2-视图"><a href="#2-视图" class="headerlink" title="2. 视图"></a>2. 视图</h2><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>视图（view）是一个从单张或多张基础数据表或其他视图中构建出来的虚拟表。同基础表一样，视图中也包含了一系列带有名称的列和行数据，但是数据库中只是存放视图的定义，也就是动态检索数据的查询语句，而并不存放视图中的数据，这些数据依旧存放于构建视图的基础表中，只有当用户使用视图是才去数据库请求相对应的数据，即视图中的数据是在引用视图时动态生成的。因此视图中的数据发生了变化，视图中相应的数据也会跟着改变。</p>
<p>PS：视图本质上就是：一个查询语句，是一个虚拟的表，不存在的表，你查看视图，其实就是查看视图对应的sql语句。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>简化用户操作：视图可以使用户将注意力集中在所关心地数据上，而不需要关心数据表的结构、与其他表的关联条件以及查询条件等。</p>
<p>对机密数据提供安全保护：有了视图，就可以在设计数据库应用系统时，对不同的用户定义不同的视图，避免机密数据（如，敏感字段“salary”）出现在不应该看到这些数据的用户视图上。这样视图就自动提供了对机密数据的安全保护功能</p>
<h4 id="实例一：单表视图"><a href="#实例一：单表视图" class="headerlink" title="实例一：单表视图"></a>实例一：单表视图</h4><ul>
<li><p>创建/替换单表视图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建/替换单表视图：</span><br><span class="line">create or replace view myview01</span><br><span class="line">as</span><br><span class="line">select empno,ename,job,deptno </span><br><span class="line">from emp</span><br><span class="line">where deptno = 20</span><br></pre></td></tr></table></figure></li>
<li><p>查看视图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查看视图：</span><br><span class="line">select * from myview01;</span><br></pre></td></tr></table></figure></li>
<li><p>向视图中插入满足条件的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 在视图中插入数据：</span><br><span class="line">insert into myview01 (empno,ename,job,deptno) values (9999,&#x27;lili&#x27;,&#x27;CLERK&#x27;,20);</span><br></pre></td></tr></table></figure>

<p>查看视图：</p>
<img src="/2021/05/07/MySQL/20210703161609.png" alt="image-20210703161609044" style="zoom:67%;"></li>
<li><p>向视图中插入不满足条件的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into myview01 (empno,ename,job,deptno) values (8888,&#x27;nana&#x27;,&#x27;CLERK&#x27;,30);</span><br></pre></td></tr></table></figure>

<p>查看原来的表，发现成功插进去了</p>
<img src="/2021/05/07/MySQL/20210703161731.png" alt="image-20210703161731377" style="zoom:67%;"></li>
<li><p>解决上面问题：</p>
<p>需要加上<strong>check option</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建/替换单表视图：</span><br><span class="line">create or replace view myview01</span><br><span class="line">as</span><br><span class="line">select empno,ename,job,deptno </span><br><span class="line">from emp</span><br><span class="line">where deptno = 20</span><br><span class="line">with check option;</span><br></pre></td></tr></table></figure>

<p>这样不满足条件的数据就不会轻易被加进去：</p>
<img src="/2021/05/07/MySQL/20210703162005.png" alt="image-20210703162005163" style="zoom:67%;"></li>
</ul>
<h4 id="实例二：多表视图"><a href="#实例二：多表视图" class="headerlink" title="实例二：多表视图"></a>实例二：多表视图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建/替换多表视图：</span><br><span class="line">create or replace view myview02</span><br><span class="line">as </span><br><span class="line">select e.empno,e.ename,e.sal,d.deptno,d.dname</span><br><span class="line">from emp e</span><br><span class="line">join dept d</span><br><span class="line">on e.deptno = d.deptno</span><br><span class="line">where sal &gt; 2000 ;</span><br><span class="line">select * from myview02;</span><br></pre></td></tr></table></figure>

<h4 id="实例三：统计视图"><a href="#实例三：统计视图" class="headerlink" title="实例三：统计视图"></a>实例三：统计视图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建统计视图：</span><br><span class="line">create or replace view myview03</span><br><span class="line">as</span><br><span class="line">select e.deptno,d.dname,avg(sal),min(sal),count(1)</span><br><span class="line">from emp e</span><br><span class="line">join dept d</span><br><span class="line">using(deptno)</span><br><span class="line">group by e.deptno ;</span><br><span class="line">select * from myview03;</span><br></pre></td></tr></table></figure>

<h4 id="实例四：基于视图的视图"><a href="#实例四：基于视图的视图" class="headerlink" title="实例四：基于视图的视图"></a>实例四：基于视图的视图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建基于视图的视图：</span><br><span class="line">create or replace view myview04</span><br><span class="line">as</span><br><span class="line">select * from myview03 where deptno = 20;</span><br><span class="line">select * from myview04;</span><br></pre></td></tr></table></figure>



<h2 id="3-存储过程"><a href="#3-存储过程" class="headerlink" title="3. 存储过程"></a>3. 存储过程</h2><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><ul>
<li><p>通过前面章节的学习，我们已经知道SQL是一种非常便利的语言。从数据库抽取数据，或者对特定的数据集中更新时，都能通过简洁直观的代码实现。</p>
</li>
<li><p>但是这个所谓的“简洁”也是有限制，SQL基本是一个命令实现一个处理，是所谓的非程序语言。</p>
</li>
<li><p>在不能编写流程的情况下，所有的处理只能通过一个个命令来实现。当然，通过使用连接及子查询，即使使用SQL的单一命令也能实现一些高级的处理，但是，其局限性是显而易见的。例如，在SQL中就很难实现针对不同条件进行不同的处理以及循环等功能。</p>
</li>
<li><p>这个时候就出现了存储过程这个概念，简单地说，存储过程就是数据库中保存(Stored)的一系列SQL命令（Procedure）的集合。也可以将其看作相互之间有关系的SQL命令组织在一起形成的一个小程序。</p>
</li>
</ul>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul>
<li> 提高执行性能。存储过程执行效率之所高，在于普通的SQL语句，每次都会对语法分析，编译，执行，而存储过程只是在第一次执行语法分析，编译，执行，以后都是对结果进行调用。</li>
<li> 可减轻网络负担。使用存储过程，复杂的数据库操作也可以在数据库服务器中完成。只需要从客户端(或应用程序)传递给数据库必要的参数就行，比起需要多次传递SQL命令本身，这大大减轻了网络负担。</li>
<li> 可将数据库的处理黑匣子化。应用程序中完全不用考虑存储过程的内部详细处理，只需要知道调用哪个存储过程就可以了</li>
</ul>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><ul>
<li><p>定义一个没有返回值的存储过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 定义一个没有返回值 存储过程</span><br><span class="line">-- 实现：模糊查询操作：</span><br><span class="line">select * from emp where ename like &#x27;%A%&#x27;;</span><br><span class="line">create procedure mypro01(name varchar(10))</span><br><span class="line">begin</span><br><span class="line">        if name is null or name = &quot;&quot; then</span><br><span class="line">                select * from emp; -- 传入null，就查看全表</span><br><span class="line">        else</span><br><span class="line">    select * from emp where ename like concat(&#x27;%&#x27;,name,&#x27;%&#x27;); </span><br><span class="line">        end if;	</span><br><span class="line">end;</span><br><span class="line">-- 删除存储过程：</span><br><span class="line">drop procedure mypro01;</span><br><span class="line">-- 调用存储过程：</span><br><span class="line">call mypro01(null);</span><br><span class="line">call mypro01(&#x27;R&#x27;);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src="/2021/05/07/MySQL/20210703171452.png" alt="image-20210703171452630" style="zoom: 50%;"></li>
<li><p>定义一个有返回值的存储过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 定义一个有返回值的存储过程</span><br><span class="line">-- in 参数前面的in可以不写</span><br><span class="line">-- out </span><br><span class="line">-- found_rows() 是mysql定义的一个函数，作用返回查询结果的条数</span><br><span class="line">-- into </span><br><span class="line">create procedure mypro02 (in name varchar(10),out num int(4))</span><br><span class="line">begin </span><br><span class="line">		if name is null or name = &quot;&quot; then</span><br><span class="line">				select * from emp;</span><br><span class="line">		else </span><br><span class="line">				select * from emp where name like concat(&#x27;%&#x27;,name,&#x27;%&#x27;);</span><br><span class="line">		end if;</span><br><span class="line">		select found_rows() into num;</span><br><span class="line">end;</span><br><span class="line">-- 调用存储过程</span><br><span class="line">call mypro02(null,@num);</span><br><span class="line">select @num;</span><br><span class="line">call mypro02(&#x27;A&#x27;,@aaa); -- 传入的参数名不一定要一样</span><br><span class="line">select @aaa;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src="/2021/05/07/MySQL/20210703191518.png" alt="image-20210703191518417" style="zoom:67%;"></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2022/05/06/git/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Git是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的项目。</p>
<p>版本控制：版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统 。</p>
<h2 id="代码托管中心"><a href="#代码托管中心" class="headerlink" title="代码托管中心"></a>代码托管中心</h2><p>我们已经有了本地库，本地库可以帮我们进行版本控制，为什么还需要代码托管中心呢？<br>它的任务是帮我们维护远程库，下面说一下本地库和远程库的交互方式，也分为两种：</p>
<ol>
<li><p>团队内部协作</p>
<img src="/2022/05/06/git/20210716160327.png" alt="image-20210716160327295" style="zoom: 50%;"></li>
<li><p>跨团队协作</p>
<img src="/2022/05/06/git/20210716160355.png" alt="image-20210716160355825" style="zoom:50%;">

<p><a href="https://github.com/SoniaChan33/SoniaChan33.github.io">https://github.com/SoniaChan33/SoniaChan33.github.io</a></p>
</li>
</ol>
<h2 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h2><ul>
<li><p>创建一个文件夹</p>
<img src="/2022/05/06/git/20210716160820.png" alt="image-20210716160820389" style="zoom: 50%;"></li>
<li><p>打开Git终端：Git Bash Here</p>
</li>
<li><p>查看Git安装版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li>
<li><p>清屏</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure></li>
<li><p>设置签名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;TeaSea33&quot;</span><br><span class="line">git config --global user.email &quot;TeaSea33@outlook.com&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>本地仓库的初始化操作(目录在本地仓库里)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<img src="/2022/05/06/git/20210716162158.png" alt="image-20210716162158453"></li>
<li><p>查看.git下的内容</p>
<img src="/2022/05/06/git/20210716162242.png" alt="image-20210716162242909" style="zoom: 50%;">

<p>注意事项： .git目录下的本地库相关的子目录和子文件不要删除，不要胡乱修改。</p>
</li>
</ul>
<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h2 id="add和commit"><a href="#add和commit" class="headerlink" title="add和commit"></a>add和commit</h2><ul>
<li><p>先创建文件</p>
</li>
<li><p>将文件提交到暂存区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add Demo2.txt</span><br></pre></td></tr></table></figure></li>
<li><p>将暂存区的内容提交到本地库</p>
<img src="/2022/05/06/git/20210716162745.png" alt="image-20210716162745742" style="zoom:67%;"></li>
<li><p>注意：</p>
<ol>
<li>不放在本地仓库中的文件，git是不进行管理</li>
<li>即使放在本地仓库的文件，git也不管理，必须通过add,commit命令操作才可以将内容提交到本地库。</li>
</ol>
</li>
</ul>
<h2 id="Status"><a href="#Status" class="headerlink" title="Status"></a>Status</h2><p>查看工作区和暂存区的状态</p>
<ul>
<li><p>创建一个文件，然后查看状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<img src="/2022/05/06/git/20210716163201.png" alt="image-20210716163201433" style="zoom:67%;"></li>
<li><p>然后将Demo2.txt通过git add命令提交到暂存区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add &quot;Demo3.txt&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>status查看状态</p>
<img src="/2022/05/06/git/20210716163336.png" alt="image-20210716163335957" style="zoom:67%;"></li>
<li><p>commit提交文件</p>
<img src="/2022/05/06/git/20210716163613.png" alt="image-20210716163613057" style="zoom:67%;"></li>
<li><p>修改文件 并查看状态</p>
<img src="/2022/05/06/git/20210716163744.png" alt="image-20210716163744634" style="zoom:67%;"></li>
<li><p>重新添加至暂存区 并查看状态</p>
<img src="/2022/05/06/git/20210716163903.png" alt="image-20210716163903519" style="zoom:67%;"></li>
<li><p>提交以后查看状态</p>
<img src="/2022/05/06/git/20210716164259.png" alt="image-20210716164259073" style="zoom:67%;">

<img src="/2022/05/06/git/20210716164315.png" alt="image-20210716164315251" style="zoom:67%;"></li>
</ul>
<h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p>可以查看提交的日志，显示最近到最远的日志</p>
<h3 id="日志展示方式"><a href="#日志展示方式" class="headerlink" title="日志展示方式"></a>日志展示方式</h3><ol>
<li><p>```shell<br>git log </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   &lt;img src=&quot;git/20210716165040.png&quot; alt=&quot;image-20210716164533294&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">   ---&gt; 分页</span><br><span class="line"></span><br><span class="line">   当历史记录过多的时候使用**空格**翻页，**b**  回到上一页，到尾页显示END,</span><br><span class="line"></span><br><span class="line">   退出：**q**</span><br><span class="line"></span><br><span class="line">2. ```shell</span><br><span class="line">   git log --pretty=oneline</span><br></pre></td></tr></table></figure>

<img src="/2022/05/06/git/20210716165022.png" alt="image-20210716165022038" style="zoom:67%;"></li>
<li><p>```shell<br>git log –oneline</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   &lt;img src=&quot;git/20210716165148.png&quot; alt=&quot;image-20210716165147993&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">4. ```shell</span><br><span class="line">   git reflog</span><br></pre></td></tr></table></figure>

<p>多了信息：HEAD@{数字}</p>
<p>数字：指针回到当前这个历史版本需要多少步</p>
<img src="/2022/05/06/git/20210716165501.png" alt="image-20210716165500983" style="zoom:67%;"></li>
</ol>
<h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><p>前进或者后退历史版本</p>
<ul>
<li>先查看历史log状态</li>
</ul>
<img src="/2022/05/06/git/20210716172535.png" alt="image-20210716172535073" style="zoom:67%;">

<ul>
<li><p>将文件后退到版本1</p>
<img src="/2022/05/06/git/20210716173722.png" alt="image-20210716173722034" style="zoom:67%;"></li>
<li><p>再次查看</p>
<img src="/2022/05/06/git/20210716173804.png" alt="image-20210716173804875" style="zoom:67%;"></li>
</ul>
<h3 id="三个参数-hard-mixed-soft"><a href="#三个参数-hard-mixed-soft" class="headerlink" title="三个参数(hard\mixed\soft)"></a>三个参数(hard\mixed\soft)</h3><p><strong>git reset –[参数] [索引]</strong></p>
<ul>
<li><p>hard</p>
<p>本地库的指针移动的同时，重置暂存区，重置工作区</p>
<img src="/2022/05/06/git/20210716190012.png" alt="image-20210716190011958" style="zoom: 33%;"></li>
<li><p>mixed</p>
<p>本地库的指针移动的同时，重置暂存区，但是工作区不动</p>
<img src="/2022/05/06/git/20210716190039.png" alt="image-20210716190039546" style="zoom:33%;"></li>
<li><p>soft</p>
<p>本地库的指针移动的时候，暂存区，工作区都不动</p>
<img src="/2022/05/06/git/20210716190052.png" alt="image-20210716190052572" style="zoom:33%;"></li>
</ul>
<p><strong>用得最多的就是第一种hard参数</strong></p>
<h3 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h3><h4 id="1-找回本地库删除的文件"><a href="#1-找回本地库删除的文件" class="headerlink" title="1.找回本地库删除的文件"></a>1.找回本地库删除的文件</h4><ul>
<li><p>新建一个Test2.txt文件 并将它add到暂存区中</p>
<img src="/2022/05/06/git/20210716191040.png" alt="image-20210716191040843" style="zoom:67%;"></li>
<li><p>再通过commit提交到本地库</p>
<img src="/2022/05/06/git/20210716191249.png" alt="image-20210716191249904" style="zoom:67%;"></li>
<li><p>删除工作区中的Test2.txt 并将删除操作同步到暂存区</p>
<img src="/2022/05/06/git/20210716191505.png" alt="image-20210716191505941" style="zoom:67%;"></li>
<li><p>将删除操作同步到本地库</p>
<img src="/2022/05/06/git/20210716191516.png" alt="image-20210716191516088" style="zoom:67%;"></li>
<li><p>查看日志</p>
<img src="/2022/05/06/git/20210716191540.png" alt="image-20210716191540549" style="zoom:67%;"></li>
<li><p>找到本地库中删除的文件，实际上就是将历史版本切换到刚才添加文件的那个版本即可</p>
<img src="/2022/05/06/git/20210716191642.png" alt="image-20210716191642335" style="zoom:67%;"></li>
</ul>
<h4 id="2-找回暂存区删除的文件"><a href="#2-找回暂存区删除的文件" class="headerlink" title="2.找回暂存区删除的文件"></a>2.找回暂存区删除的文件</h4><ul>
<li><p>删除工作区数据</p>
<img src="/2022/05/06/git/20210716192257.png" alt="image-20210716192257627" style="zoom:67%;"></li>
<li><p>同步到缓存区</p>
<img src="/2022/05/06/git/20210716192305.png" alt="image-20210716192305650" style="zoom:67%;"></li>
<li><p>查看日志</p>
<img src="/2022/05/06/git/20210716192331.png" alt="image-20210716192331458" style="zoom:67%;"></li>
<li><p>找到当前指针 然后返回到该状态</p>
<img src="/2022/05/06/git/20210716192952.png" alt="image-20210716192952612" style="zoom:67%;">

<img src="/2022/05/06/git/20210716193047.png" alt="image-20210716193047918" style="zoom:67%;"></li>
</ul>
<h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><ol>
<li><p>比对<strong>工作区</strong>和<strong>暂存区</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git diff [文件名]</span><br></pre></td></tr></table></figure>

<ul>
<li>添加并提交一个内容为aaaa的Test3.txt    </li>
</ul>
<img src="/2022/05/06/git/20210716195249.png" alt="image-20210716195249530" style="zoom:67%;">

<ul>
<li>更改工作区的文件加入bbb，再用dif进行比对，发现不同</li>
</ul>
<img src="/2022/05/06/git/20210716195504.png" alt="image-20210716195504098" style="zoom:67%;">



<ul>
<li>如果修改了多个文件，多个文件的比对命令直接是git diff</li>
</ul>
<img src="/2022/05/06/git/20210716195715.png" alt="image-20210716195715409" style="zoom:67%;"></li>
<li><p>比对<strong>暂存区</strong>和<strong>本地库</strong> ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git diff [历史版本] [文件]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>文件添加不提交到本地库，此时暂存区就和工作区相同为aaaabbb</p>
</li>
<li><p>查看日志</p>
<img src="/2022/05/06/git/20210716202947.png" alt="image-20210716202947616" style="zoom:67%;">

<p>此刻的本地库还停留在之前第一次修改</p>
</li>
<li><p>比对暂存区和本地库中的HEAD当前指针状态</p>
<img src="/2022/05/06/git/20210716203057.png" alt="image-20210716203056977" style="zoom:67%;">

<p>发现不一样，说明没有提交的时候就是不一样的</p>
</li>
<li><p>HEAD部分可以改成其他历史版本的标号</p>
<img src="/2022/05/06/git/20210716203405.png" alt="image-20210716203405603" style="zoom:67%;"></li>
</ul>
</li>
</ol>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>查看分支</p>
<img src="/2022/05/06/git/20210716205522.png" alt="image-20210716205522520" style="zoom:67%;">

<p>创建新分支</p>
<img src="/2022/05/06/git/20210716205639.png" alt="image-20210716205639017" style="zoom:67%;">

<p>切换分支</p>
<img src="/2022/05/06/git/20210716205742.png" alt="image-20210716205742388" style="zoom: 67%;">

<p>进入branch01分支，增加内容</p>
<img src="/2022/05/06/git/20210716210648.png" alt="image-20210716210648550" style="zoom: 67%;">

<img src="/2022/05/06/git/20210716210051.png" alt="image-20210716210051334" style="zoom:67%;">

<p>再次查看两个分支发现主分支没有改变</p>
<img src="/2022/05/06/git/20210716210157.png" alt="image-20210716210157353" style="zoom:67%;">

<p>查看文件</p>
<img src="/2022/05/06/git/20210716210515.png" alt="image-20210716210515711" style="zoom: 67%;">

<p>将branch01合并到主分支</p>
<img src="/2022/05/06/git/20210716211526.png" alt="image-20210716211526286" style="zoom: 67%;">

<p>因为在同一文件的同一位置修改了文件</p>
<img src="/2022/05/06/git/20210716211737.png" alt="image-20210716211737215" style="zoom:50%;">

<p>解决冲突：</p>
<p>人为决定，留下想要的就可以，然后再添加</p>
<img src="/2022/05/06/git/20210716212101.png" alt="image-20210716212101854" style="zoom:67%;">

<p>提交冲突，不能带文件名</p>
<img src="/2022/05/06/git/20210716212214.png" style="zoom:67%;">

<img src="/2022/05/06/git/20210716212214.png" alt="image-20210716212214847" style="zoom:67%;">





<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><p>创建远程库</p>
<p>为远程库取别名</p>
<img src="/2022/05/06/git/20210717114246.png" alt="image-20210717114246916" style="zoom:67%;">

<h3 id="将本地库数据推送到远程库中"><a href="#将本地库数据推送到远程库中" class="headerlink" title="将本地库数据推送到远程库中"></a>将本地库数据推送到远程库中</h3><img src="/2022/05/06/git/20210717114612.png" alt="image-20210717114612323" style="zoom:67%;">

<img src="/2022/05/06/git/20210717114625.png" alt="image-20210717114625397" style="zoom:67%;">

<img src="/2022/05/06/git/20210717114728.png" alt="image-20210717114728691" style="zoom:67%;">

<p>查看远程库</p>
<img src="/2022/05/06/git/20210717114756.png" alt="image-20210717114756656" style="zoom:67%;">





<h1 id="SSH免密操作"><a href="#SSH免密操作" class="headerlink" title="SSH免密操作"></a>SSH免密操作</h1><ol>
<li><p>进入用户的主目录中：</p>
</li>
<li><p>执行命令，生成一个.ssh目录</p>
<img src="/2022/05/06/git/20210717204402.png" alt="image-20210717204402583" style="zoom: 67%;"></li>
<li><p>发现.ssh目录下有两个文件</p>
<img src="/2022/05/06/git/20210717204425.png" alt="image-20210717204425794" style="zoom:67%;"></li>
<li><p>第二个文件里面的密钥复制，去github下新建密钥</p>
</li>
<li><p>密钥生成：</p>
<img src="/2022/05/06/git/20210717144958.png" alt="image-20210717144958526" style="zoom:67%;"></li>
</ol>
<p>免密操作使每次需要push仓库的时候，都不用再输入密码434</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习</title>
    <url>/2021/07/16/Linux%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><h2 id="启动网络"><a href="#启动网络" class="headerlink" title="启动网络"></a>启动网络</h2><ul>
<li>启动网卡（仅针对单次可用）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nmcli c up ens33</span></span><br></pre></td></tr></table></figure>

<ul>
<li>修改配置文件（永久可用）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br></pre></td></tr></table></figure>

<img src="/2021/07/16/Linux%E5%AD%A6%E4%B9%A0/20210810165254.png" alt="image-20210810165233126" style="zoom:33%;">

<p>ONBOOT=yes</p>
<p>NAT模式</p>
<p>在VMWare中默认使用的NAT模式</p>
<ul>
<li>Network Address Translation 网络地址转换，</li>
</ul>
<p>为什么要求改网络类型：因为给NAT模式外界不能访问windows里面的操作系统</p>
<p>改成桥接模式</p>
<img src="/2021/07/16/Linux%E5%AD%A6%E4%B9%A0/20210810165902.png" alt="image-20210810165902006" style="zoom: 33%;">

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
